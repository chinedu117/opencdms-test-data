$STORAGE:2
      SUBROUTINE WNDSMRY(COUNT,MXCOUNT,RECID,HLDARRAY,MXDATCOL,GRAFELEM,
     +                   ITYPE,NUMLOOP,MONNAME,TITLE,SUBTITLE,COLHDR,
     +                   ROWHDR,NUMPTS,RTNCODE)
C------------------------------------------------------------------------------
C     PROGRAM TO COMPUTE A BI-VARIATE FREQUENCY DISTRIBUTION OF WIND 
C     SPEED AND DIRECTION BY PROCESSING THE INFORMATION PASSED.  THE SUMMARY
C     PRODUCES RESULTS BROKEN DOWN BY 8 OR 16 POINTS OF DIRECTION AND EVERY
C     WHOLE SPEED VALUE FROM 0 TO 50.  OUTPUT IS WRITTEN TO UNIT 17.
C
C     ----> ROUTINE IS ASSOCIATED WITH GRAFINIT <----
C
C     INPUT ARGUMENTS:
C
C     COUNT     INTEGER*4   WORK ARRAY TO HOLD THE CUMULATIVE FREQUENCY
C                           ARRAY IS DIMENSIONED IN GRAFINIT
C     MXCOUNT   INTEGER*2   SIZE OF ARRAY COUNT
C     RECID     CHAR        STNID,YEAR,MONTH,DAY,HOUR OF CURRENT RECORD
C     HLDARRAY  REAL ARRAY  DATA VALUES OF CURRENT DATA FRAME
C     MXDATCOL  INT2        FIRST DIMENSION OF HLDARRAY
C     GRAFELEM  INT2 ARRAY  ELEMENT CODES OF VALUES HELD IN HLDARRAY
C     ITYPE     INT2        DATA TYPE NUMBER (2-6)
C     NUMLOOP   INT2        NUMBER OF VALUES IN A FRAME OF THIS DATA TYPE
C     MONNAME   CHAR ARRAY  MONTH NAME ARRAY 
C     TITLE     CHAR        TITLE FROM DATA FRAME
C     SUBTITLE  CHAR        SUBTITLE FROM DATA FRAME
C     COLHDR    CHAR ARRAY  DATA COLUMN HEADERS
C     ROWHDR    CHAR ARRAY  DATA ROW HEADERS
C     NUMPTS    INT2        NUMBER OF WINDROSE DIRECTIONS (8 OR 16)
C     RTNCODE   CHAR        IF = '0' NORMAL RECORD, IF = '1', END OF DATA 
C                           SELECTION. PROCESS LAST RECORD.
C
C     OUTPUT ARGUMENTS:  
C
C     RTNCODE   CHAR        ERROR FLAG
C                           '0'=NO ERROR 
C                           '1'=MAXIMUM FILE SIZE EXCEEDED--CHECK ON LAST CALL
C                           '2'=COUNT ARRAY TOO SMALL--CHECK ON FIRST CALL
C                           '3'=END OF DATA PROCESSING AND NO DATA WAS FOUND 
C                               CHECK ON LAST CALL
C                           '4'=FILE O:\DATA\WROSPOKE.PRM MISSING OR IN ERROR
C                           '5'=FILE P:\DATA\ELEM.DEF MISSING OR IN ERROR
C                           '6'=TEXT FOR WIND DIRECTION UNITS IN WROSPOKE.PRM
C                               DOES NOT MATCH THOSE IN ELEM.DEF
C                           '7'=WIND DIRECTION CODE NOT LISTED IN WROSPOKE.PRM
C                           MSG # FOR RTNCODES 4-7: 4-464, 5-462, 6-409, 7-410
C------------------------------------------------------------------------------
      CHARACTER*1  RTNCODE
      CHARACTER*12 MONNAME(13)
      CHARACTER*18 RECID,PREVID
      CHARACTER*28 TITLE,SUBTITLE,COLHDR(*)
      REAL*4       MAXVALUE(2), HLDARRAY(MXDATCOL,*)
      INTEGER*2    GRAFELEM(*)
      CHARACTER*12 ROWHDR(*)
C
C  VARIABLES FOR COMPUTATION OF RESULTS
C
      PARAMETER (NUM1GROUPS=51,NUM2GROUPS=16)
      INTEGER*4 COUNT(13,NUM1GROUPS,NUM2GROUPS), SUMSP(13),
     +          TOTAL, ADJ, ADJ8PT(36), ADJ16PT(36)
      INTEGER*2 DIR8PT(36), DIR16PT(36), ELEM(2), MONTH, MSNG(13),
     +          WINDCODE(20)
      REAL*4    FREQUENCY(NUM2GROUPS,NUM1GROUPS), FVAL
      CHARACTER*78 MSG
      CHARACTER*17 UNITDEG, UNITENG, UNITREAL
      CHARACTER*7  DMMY
      COMMON /WNDSMY/ SUMSP, TOTAL, ELEM, MONTH, MSNG, DIR8PT,
     +              FREQUENCY, FVAL, ADJ, ADJ8PT, ADJ16PT, DIR16PT, MSG
C     
      LOGICAL   FIRSTCALL, NODATA, ENDDATA, ROUNDEG
c      DATA WINDCODE  /111,112,58,59,60,61/
      DATA FIRSTCALL /.TRUE./
      DATA NODATA    /.TRUE./
      DATA ENDDATA   /.FALSE./
      DATA ROUNDEG   /.FALSE./
C
C   SET THE MAXIMUM VALUES FOR SPEED AND DIRECTION(POINTS).  VALUES WILL
C   BE SUMMARIZED INTO RANGES OF SIZE 1 FROM 1 TO THESE VALUES
C   (1,2,3...MAXVALUE(1),  1,2,3...MAXVALUE(2))
C
      DATA MAXVALUE /51.,36./
C
C   ON FIRST CALL SET UP ELEMENT INFO ETC; CHECK SIZE OF COUNT
C
      IF (FIRSTCALL) THEN
         PREVID = 'Z        '
         FIRSTCALL = .FALSE.
         ELEM(1) = GRAFELEM(1)
         ELEM(2) = GRAFELEM(2)
         IF ((NUM1GROUPS*NUM2GROUPS*13) .GT. MXCOUNT) THEN
            RTNCODE='2'
            RETURN
         ENDIF   
      END IF
C
C   INITIALIZE
C
      IF (PREVID.EQ.'Z       ') THEN
         PREVID = RECID
         DO 80 IMON = 1,13
            MSNG(IMON) = 0
            SUMSP(IMON) = 0
            DO 80 I=1,NUM1GROUPS
               DO 80 J=1,NUM2GROUPS
                  COUNT(IMON,I,J) = 0
   80    CONTINUE
         TOTAL = 0
      END IF
C
C   IF RTNCODE INDICATES END OF DATA, FORCE THE STN SUMMARY CALCULATIONS FOR
C   THE LAST STN STILL IN THE DATA ARRAYS
C
      IF (RTNCODE.EQ.'1') THEN
         RECID(1:8) = 'XXXXXXXX'
         ENDDATA = .TRUE.
         RTNCODE = '0'
      END IF

      READ(RECID,'(12X,I2)') MONTH
C
C---- READ THE FILE WHICH DEFINES THE TEXT FOR WIND DIRECTION UNITS
C---- AND VALID SPEED-DIRECTION ELEMENT CODE PAIRS
C
      OPEN(UNIT=66,FILE='O:\DATA\WROSPOKE.PRM',STATUS='OLD',
     +     IOSTAT=IOCHK)
      IF (IOCHK .EQ. 0) THEN
          DO 33 K=1,10
             READ(66,*)
   33     CONTINUE
          READ(66,*) UNITDEG,UNITENG
          DO 35 K=1,8
             READ(66,*)
   35     CONTINUE
          READ(66,*) NMPAIR
          IF (NMPAIR .LE. 10) THEN
             DO 37 K=1,NMPAIR
                READ(66,*) WINDCODE(K*2-1), WINDCODE (K*2)
   37        CONTINUE
             CLOSE(66)
          ELSE
C---         TOO MANY WIND SPEED-DIRECTION PAIRS.  STOP PROCESSING
             CLOSE(66)
             RTNCODE = '4'
             RETURN
          ENDIF
      ELSE
C---     FILE ERROR - WROSPOKE.PRM FILE NOT FOUND. STOP PROCESSING
         RTNCODE= '4'
         RETURN
      ENDIF
C
C   MAKE SURE THAT THE FIRST ELEMENT PROCESSED (NELEM1) IS ALWAYS
C   SPEED AND THE SECOND IS ALWAYS DIRECTION AND IS A VALID SPD-DIR PAIR
C
      DO 50 K=1,NMPAIR
         IF (ELEM(1) .EQ. WINDCODE(K*2-1))   THEN
            IF (ELEM(2) .EQ. WINDCODE(K*2))  THEN
               NELEM1 = 1
               NELEM2 = 2
               GO TO 60
            ENDIF
         ENDIF
         IF (ELEM(2) .EQ. WINDCODE(K*2-1))   THEN
            IF (ELEM(1) .EQ. WINDCODE(K*2))  THEN
               NELEM1 = 2
               NELEM2 = 1
               GO TO 60
            ENDIF
         ENDIF
   50 CONTINUE
C
C--- INVALID WIND SPEED-DIRECTION PAIRING.  STOP PROCESSING
C
      RTNCODE = '7'
      RETURN
C
C---  GET WIND DIRECTION UNITS FROM ELEM.DEF FILE 
C
   60 UNITREAL = ' '      
      OPEN (UNIT=30,FILE='P:\DATA\ELEM.DEF',ACCESS='DIRECT',RECL=110,
     +      STATUS='OLD',IOSTAT=IOCHK)
      IF (IOCHK .EQ. 0) THEN
         NMPAIR = NMPAIR * 2
         DO  70 K=2,NMPAIR,2
            IF (ELEM(NELEM2) .EQ. WINDCODE(K))  THEN
               READ(30,REC=WINDCODE(K)) MSG,DMMY,UNITREAL
               IF (UNITREAL .EQ. UNITENG) THEN 
                   ROUNDEG = .FALSE.
                   GO TO  75
               ENDIF
               IF (UNITREAL .EQ. UNITDEG)  THEN
                   ROUNDEG = .TRUE.
                   GO TO  75
               ENDIF            
C------------  TEXT FOR UNITS IN WROSPOKE.PRM DOES NOT MATCH THOSE IN ELEM.DEF
               RTNCODE= '6'
               RETURN
            ENDIF
   70    CONTINUE
C------  NO MATCH TO LIST OF VALID WIND DIRECTION ELEMENT CODES.  STOP HERE
         RTNCODE= '7'
         RETURN
   75    CLOSE(30)
      ELSE
C---     FILE ERROR - ELEM.DEF,  NO WIND DIRECTION UNITS 
         RTNCODE= '5'
         RETURN
      ENDIF
C
C   PROCESS THE VALUES FOR THIS FRAME (SPEED IS FIRST, DIRECTION SECOND)
C   36 DIRECTION POINTS ARE CONVERTED TO 8 OR 16 DIRECTION POINTS ACCORDING
C   TO WMO MARINE DATA USERS GUIDE BY ALLOCATING A FRACTIONAL PORTION TO EACH
C   CONDENSED DIRECTION.  FRACTIONAL VALUES ARE SCALED BY 1000 TO ALLOW 
C   INTEGER CALCULATIONS
C
      DO 100 I = 1,NUMLOOP 
         IF ((HLDARRAY(NELEM1,I).EQ.0.)    .OR.
     +       (HLDARRAY(NELEM1,I).NE.-99999.0 .AND.
     +        HLDARRAY(NELEM2,I).NE.-99999.0)) THEN
C---  GET THE GROUP INDEX FOR WIND SPEED; SUM VALUES
            RVAL = HLDARRAY(NELEM1,I)
            I1 = NINT(RVAL)
            SUMSP(MONTH) = SUMSP(MONTH) + I1
            I1 = MIN0((MAXVALUE(1)-1),I1) + 1
C            IF (RVAL.GE.MAXVALUE(1)) THEN
C               RVAL = MAXVALUE(1) - 1.   
C            END IF
C            I1 = INT(RVAL) + 1
C            I1 = NINT(RVAL) + 1
C---  GET THE GROUP INDEX FOR WIND DIRECTION; WHEN VALUE IS IN DEGREES, 
C---  ROUND TO THE NEAREST TENS OF DEGREES
            RVAL = HLDARRAY(NELEM2,I)
            IF (ROUNDEG) THEN
               RVAL = (RVAL + 5.) / 10.
            ENDIF
            IF (RVAL.GT.MAXVALUE(2)) THEN
               RVAL = MAXVALUE(2)
            END IF
C---  TALLY CALM WIND REPORTS AS IF IN NORTH COLUMN (36).
            IF (I1 .EQ. 1) THEN 
               I2 = 36
            ELSE
               I2 = NINT(RVAL)
C               I2 = INT(RVAL)
            ENDIF
            IF (NUMPTS .EQ. 8) THEN
               ADJ = ADJ8PT(I2)
               KCOL= DIR8PT(I2)
            ELSE
               ADJ = ADJ16PT(I2)
               KCOL= DIR16PT(I2)
            ENDIF
            IF (ADJ .EQ. 1000) THEN
               COUNT(MONTH,I1,KCOL) = COUNT(MONTH,I1,KCOL) + ADJ
            ELSE
               COUNT(MONTH,I1,KCOL) = COUNT(MONTH,I1,KCOL) + ADJ
               KCOL = KCOL + 1
               IF (KCOL .GT. NUMPTS) THEN
                  KCOL = 1
               ENDIF
               COUNT(MONTH,I1,KCOL)=COUNT(MONTH,I1,KCOL) + (1000-ADJ)
            ENDIF                  
         ELSE
            MSNG(MONTH) = MSNG(MONTH) + 1
         ENDIF
100   CONTINUE    
160   CONTINUE
C
C   IF A NEW STATION IS READ, COMPUTE THE ANNUAL SUMMARY OF THE
C   MONTHLY VALUES AND WRITE THE RESULTS TO DISK FILE 17
C
      IF (RECID(1:8).NE.PREVID(1:8)) THEN
         DO 200 IMON = 1,12
            MSNG(13) = MSNG(13) + MSNG(IMON)
            DO 200 I = 1,NUM1GROUPS
               DO 200 J = 1,NUM2GROUPS
                  COUNT(13,I,J) = COUNT(13,I,J) + COUNT(IMON,I,J)
200      CONTINUE  
C
C     PROCESS EACH MONTH AND THE ANNUAL SUMMARY 
C
         CALL LOCATE(22,0,IERR)
         CALL WRTSTR('Writing...',10,12,0)

         DO 500 IMON = 1,13
            TOTAL = 0
            IF (IMON.LT.13) THEN
               SUMSP(13) =  SUMSP(13) + SUMSP(IMON)
            ENDIF   
C            SUMSP = 0
C
C       SUMMARIZE THE RESULTS AND COMPUTE PERCENT FREQUENCIES
C  
            DO 220 I = 1, NUM1GROUPS
               DO 220 J = 1, NUMPTS
                  TOTAL = TOTAL + COUNT(IMON,I,J)
C                  SUMSP = SUMSP + (COUNT(IMON,I,J) * (I-1))
  220       CONTINUE
            IF (TOTAL.GT.0) THEN
               TOTAL = TOTAL / 1000
               DO 230 I = 1, NUM1GROUPS
                 DO 230 J = 1, NUMPTS
                    FVAL = FLOAT(COUNT(IMON,I,J)) / 1000.
                    FREQUENCY(J,I)=(FVAL * 100.) / FLOAT(TOTAL)
  230          CONTINUE              
C               FREQUENCY(2,1) = (FLOAT(SUMSP)/1000.) / FLOAT(TOTAL)
               FREQUENCY(2,1) = FLOAT(SUMSP(IMON)) / FLOAT(TOTAL)
               FREQUENCY(3,1) = FLOAT(TOTAL)
C               FREQUENCY(4,1) = FLOAT(MSNG(IMON))
               CALL GETMSG(483,MSG)
               CALL GETMSG(999,MSG)
               ROWHDR(1)=MSG
               DO 250 I=2,NUM1GROUPS
                  I1 = I - 1
                  WRITE(ROWHDR(I),'(I2)') I1
  250          CONTINUE        
C
C      WRITE THE OUTPUT 
C 
               CALL SETTITLE(ITYPE,PREVID,MONNAME,TITLE,SUBTITLE)
               SUBTITLE = MONNAME(IMON)
               NUMCOL=NUMPTS
               NUMROW=NUM1GROUPS
               RTNCODE='0'
               CALL WRTFRAME(4,TITLE,SUBTITLE,COLHDR,ROWHDR,FREQUENCY,
     +                       NUM2GROUPS,NUMCOL,NUMROW,RTNCODE)         
               NODATA = .FALSE.
            ENDIF
500      CONTINUE
         CALL LOCATE(22,0,IERR)
         CALL WRTSTR('          ',10,12,0)
C
C   RESET HLDARRAY TO ALL MISSING 
C
         DO 530 I1 = 1,NUMLOOP
            DO 530 J1 = 1,2
               HLDARRAY(J1,I1) = -99999.
530      CONTINUE
         PREVID = 'Z       '
      END IF
C      
C       .. SET FLAG IF NO DATA HAS BEEN RECORDED
      IF (ENDDATA .AND. NODATA) THEN
         RTNCODE = '3'
      ENDIF   
      RETURN
      END
C
      BLOCK DATA
      PARAMETER (NUM1GROUPS=51,NUM2GROUPS=16)
      INTEGER*4 SUMSP(13), TOTAL, ADJ,
     +          ADJ8PT(36), ADJ16PT(36)
      INTEGER*2 DIR8PT(36), DIR16PT(36), ELEM(2), MONTH, MSNG(13)
      REAL*4    FREQUENCY(NUM2GROUPS,NUM1GROUPS), FVAL
      CHARACTER*78 MSG
      COMMON /WNDSMY/  SUMSP, TOTAL, ELEM, MONTH, MSNG, DIR8PT,
     +              FREQUENCY, FVAL, ADJ, ADJ8PT, ADJ16PT, DIR16PT, MSG
      DATA   ADJ8PT /1000,750,1000,1000,1000,1000,250,1000,1000,1000,
     +       750,1000,1000,1000,1000,250,1000,1000,1000,750,1000,1000,
     +       1000,1000,250,1000,1000,1000,750,1000,1000,1000,1000,250,
     +       1000,1000/
      DATA   DIR8PT /1,1,2,2,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,6,6,6,6,
     +               6,7,7,7,7,8,8,8,8,8,1,1/
      DATA   ADJ16PT /625,1000,875,1000,1000,125,1000,375,1000,625,
     +       1000,875,1000,1000,125,1000,375,1000,625,1000,875,1000,
     +       1000,125,1000,375,1000,625,1000,875,1000,1000,125,1000,
     +       375,1000/
      DATA   DIR16PT /1,2,2,3,3,3,4,4,5,5,6,6,7,7,7,8,8,9,9,10,10,11,
     +                11,11,12,12,13,13,14,14,15,15,15,16,16,1/
      END
