$STORAGE:2
C
      PROGRAM PACKTWF
C
C  THIS PROGRAM COMPRESSES THE PHYSICAL SIZE OF A KEY ENTRY FILE.
C  
C  THIS ROUTINE:
C      SOLICITS DATASET INFORMATION FROM THE USER.
C      OPENS THE INDICATED DATA AND INDEX FILES FOR INPUT.
C      OPENS HOLD DATA AND INDEX FILES FOR OUTPUT.
C      READS THE INPUT DATA AND COPIES THE ACTIVE RECORDS
C         TO THE HOLD FILE.  RECORDS MARKED FOR DELETION
C         ARE NOT COPIED.
C      CLOSES AND DELETES THE INPUT FILES.
C      RENAMES THE HOLD FILES TO THE ORIGINAL FILE NAMES.
C
$INCLUDE: 'VAL1.INC'
C
$INCLUDE: 'INDEX.INC'
C
      CHARACTER*1 RTNCODE
      CHARACTER*2 RTNFLAG 
      CHARACTER*3 TBLRECTYP(7),RFIELD(4)
      CHARACTER*4 INLVL
      CHARACTER*12 MENUNAME
      CHARACTER*21 IDKEY
      CHARACTER*22 HLDNAM, HLDIDX, BDXNAM
      CHARACTER*23 MSGTXT
      CHARACTER*64 HELPFILE
C
      INTEGER*2 ITYPE,RFLDLEN,DELHLD,TBLNUMLIN(7),HLDBGNIDX,HLDNUMIDX
C
      DATA HELPFILE /'P:\HELP\PACKTWF.HLP'/
      DATA TBLRECTYP /'MLY','10D','DLY','SYN','HLY','15M','U-A'/
     +    ,TBLNUMLIN /12,36,31,8,24,96,100/
C
      CALL SETMOD(3,IERR)
C
C       ** DETERMINE THE LEVEL OF AUTHORITY FOR THE CURRENT USER
C          ONLY HIGH OR MEDIUM AUTHORITY MAY COMPRESS FILES
C
      CALL GETAUT(INLVL)
      IF (INLVL.NE.'HI  '.AND.INLVL.NE.'MED ')THEN
         CALL LOCATE(23,0,IERR)
         STOP ' '
      END IF
C
C       ** GET THE DATA TYPE
C
   10 IROW = 5
      ICOL = 8
      CALL CLS
      CALL LOCATE(IROW,ICOL,IERR)
      MENUNAME = 'DR-DATATYPES'
      CALL GETMNU(MENUNAME,HELPFILE,ITYPE)
      IF (ITYPE.EQ.0)THEN
         CALL LOCATE(23,0,IERR)
         STOP ' '
      END IF
C
C       ** GET THE DATASET NUMBER
C
   20 RFIELD(1) =' '
      RFIELD(2) = TBLRECTYP(ITYPE)
      RFIELD(3) = ' '
      RFIELD(4) = ' '
      RFLDLEN = 3
      CALL LOCATE(IROW,48,IERR)
      CALL GETFRM('PACKTWF ',HELPFILE,RFIELD,RFLDLEN,RTNFLAG)
      IF (RTNFLAG.EQ.'4F'.OR.RFIELD(4)(1:1).NE.'Y')THEN
         CALL CLS
         GO TO 10
      END IF
C
C       ** CALCULATE THE RECORD LENGTH OF THE .TWF FILES           
C          NOTE:  ITYPFLG<0 TELLS GETSET TO QUIT AFTER READING SETUP.DAT
C                 NUMLINE IS DEFINED SO GETSET CAN CALCULATE RECORD LENGTH
C
      NUMLINE = TBLNUMLIN(ITYPE)
      READ(RFIELD(1),'(I3)') IDSETID
      ITYPFLG = -ITYPE
      CALL GETSET(IDSETID,ITYPFLG,RFIELD(2),IDUM,RTNCODE)
C
C       ** BUILD THE FILE NAMES
C
      FILNAM = 'P:\DATA\??????.TWF'
      HLDNAM = 'P:\DATA\HLD???.???'
C
      FILNAM(9:11) = RFIELD(2)
      FILNAM(12:14) = RFIELD(1)
      IDXNAM = FILNAM
      IDXNAM(16:18) = 'IDX'
      HLDNAM(12:14) = RFIELD(2)
      HLDNAM(16:18) = RFIELD(1)
      HLDIDX = HLDNAM
      HLDIDX(9:11) = 'IDX'
      BDXNAM = FILNAM
      BDXNAM(16:18) = 'BDX'  
C
C       ** OPEN THE INPUT FILES -- UNIT 19 = .IDX       UNIT 20 = .TWF
C
      CALL OPENFILES(2)
C
C       ** OPEN THE TEMP HOLD FILES
C
C       .. UNIT 60 = TEMP DATA FILE
      OPEN (60,FILE=HLDNAM,STATUS='NEW',ACCESS='DIRECT',
     +         FORM='UNFORMATTED',RECL=RLNGTH,IOSTAT=IOCHK)
C
      IF(IOCHK.GE.6410.AND.IOCHK.LE.6414) THEN
         ERRFIL = HLDNAM
         CALL OPENMSG(ERRFIL,'OPENFILES   ',IOCHK)
         GO TO 20
      ELSE IF (IOCHK.NE.0) THEN
         WRITE(MSGTXT,'(A18,1X,I4)') HLDNAM,IOCHK
         CALL WRTMSG(4,157,12,1,1,MSGTXT,23)
         STOP 2            
      END IF   
C
C       .. UNIT 69 = TEMP IDX FILE
      OPEN (69,FILE=HLDIDX,STATUS='NEW',ACCESS='DIRECT',
     +         FORM='UNFORMATTED',RECL=25,IOSTAT=IOCHK)
C
      IF(IOCHK.GE.6410.AND.IOCHK.LE.6414) THEN
         ERRFIL = HLDIDX
         CALL OPENMSG(ERRFIL,'OPENFILES   ',IOCHK)
         GO TO 10
      ELSE IF (IOCHK.NE.0) THEN
         WRITE(MSGTXT,'(A18,1X,I4)') HLDIDX,IOCHK
         CALL WRTMSG(4,157,12,1,1,MSGTXT,23)
         STOP 2            
      END IF   
C
C       ** COPY THE FILE TO BE COMPRESSED TO THE HOLD FILE.
C          DO NOT COPY ANY RECORDS MARKED FOR DELETION.
C
C       .. READ THE FIRST INDEX RECORD
      READ(19,REC=1) DELKEY,HLDBGNIDX,HLDNUMIDX
C
C       .. WRITE THE FIRST HOLD INDEX RECORD
      DELKEY = 0
      BGNIDX = 2
      NUMIDX = 1
      WRITE(69,REC=1) DELKEY,BGNIDX,NUMIDX
C
C       .. LOOP THRU ALL THE ACTIVE RECORDS
      DO 1000 II = HLDBGNIDX,HLDNUMIDX
C
C          .. THE DATA RECORDS ARE BEING READ IN SORTED ORDER 
         READ(19,REC=II) DELHLD,IDKEY,IRECIN
         READ(20,REC=IRECIN) IDKEY,((VALARRAY(I,J),I=1,NUMELEM),
     +         J=1,NUMLINE),(((FLAGARRAY(K,L,M),M=1,2),K=1,NUMELEM),
     +         L=1,NUMLINE)
C
C          .. CALCULATE NEW RECORD NUMBERS FOR INDEX AND DATA FILES
         NUMIDX  = NUMIDX + 1
         IDXNUM  = NUMIDX
         IRECOUT = NUMIDX - 1
C
C          .. WRITE UPDATED HEADER RECORD FOR INDEX FILE  
         DELKEY = 0
         WRITE (69,REC=1) DELKEY,BGNIDX,NUMIDX
C
C          .. WRITE ENTRY IN INDEX FILE         
         DELKEY = 2
         WRITE (69,REC=IDXNUM) DELKEY,IDKEY,IRECOUT
C
C          .. WRITE ENTRY IN DATA FILE -- UPDATED RECORD NUMBER IS RECORDED 
C             IN INDEX FILE         
         WRITE (60,REC=IRECOUT) IDKEY,((VALARRAY(I,J),I=1,NUMELEM),
     +          J=1,NUMLINE),(((FLAGARRAY(K,L,M),M=1,2),K=1,NUMELEM),
     +          L=1,NUMLINE)
C
 1000 CONTINUE
C
C       ** CLOSE FILES; DELETE OLD .TWF AND .IDX FILES
      CLOSE (19,STATUS = 'DELETE')
      CLOSE (20,STATUS = 'DELETE')
      CLOSE (69)
      CLOSE (60)
C
C       ** RENAME HOLD FILES TO OLD .TWF AND .IDX NAMES
      HLDNAM(19:19) = CHAR(0)
      FILNAM(19:19) = CHAR(0)
      CALL RNAME2(HLDNAM,FILNAM,IERR)
      HLDIDX(19:19) = CHAR(0)
      IDXNAM(19:19) = CHAR(0)
      CALL RNAME2(HLDIDX,IDXNAM,IERR)
C
C   ** DELETE THE BACKUP INDEX FILE.  SINCE THE TEMPORAY WORK FILE (.TWF)
C   HAS BEEN COMPRESSED, THEREFORE THE BACKUP INDEX FILE IS NO LONGER VALID. 
C
      OPEN (70,FILE=BDXNAM,STATUS='UNKNOWN',ACCESS='DIRECT',
     +         FORM='UNFORMATTED',RECL=25,IOSTAT=IOCHK)
      CLOSE(70,STATUS='DELETE')
C
 9000 STOP ' '
      END
