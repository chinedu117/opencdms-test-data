C
C
C
      SUBROUTINE KWMICN (LABON,IDCPL,CONMN,CONMX,CTRVAL,D,W)
      CHARACTER *8 LABFMT,LBLFMT
      INTEGER*2    LABON,IDCPL,FONTPS
C
      DIMENSION D(1,1), W(1,1), S(3,3), H(3,3)
C
      COMMON /KWIGCN/ ZCON(55)
      COMMON /KWIGS/   Z(200)
      COMMON /KWCMCN/ NEX1,NEX2,NEY1,NEY2,NDASHD,NDASHU,LBLFMT,HDEL,
     1              VDEL,INDEX,IFLIPX,IFLIPY,DUM(4)
      COMMON /KWCHEI/ CSIZE(64)
      COMMON /KWMID2/ NUM888,pvvv,icqqq
      COMMON /KWCHAR/ CHARHT,FONTPS,IDECPL,LABCHK
      DATA SAVLIS,SAVLIN,SAVCHS,SAVCHI,SAVSIZ,SAVSPA,CHDISP
     1       /6*-1.,20./
      DATA IERR /0/
      DATA LABFMT /'(I8)'/
      DATA ZINIT /4HINIT/
C
      IDECPL =  IDCPL
      LABCHK  =  LABON
      IFLAG = 0
      
            CALL KWPARM(17,CONMN)      
            CALL KWPARM(18,CONMX)  
            CALL KWPARM(20,CTRVAL)
c
        NUM888 = 0
C
       IF(ZCON(1).EQ.ZINIT) GO TO 5
C
CCCKW 1020 FORMAT(' ')
CCC
      IFLAG = 1
      RETURN
    5 CONTINUE
      IN1    = ZCON(2)
      IN2    = ZCON(3)
      IN3    = ZCON(4)
      IN4    = ZCON(5)
      NEX1   = ZCON(6)
      NEX2   = ZCON(7)
      NEY1   = ZCON(8)
      NEY2   = ZCON(9)
C     KW1C PLOT INCREMENT VS DATA SPACING - CODE ADDED 7-85 - DMK
C
         IF( (ZCON(9) - ZCON(8)) .EQ.0.0) THEN
               ZCON(9) = 36
               ZCON(10) = 180.
         ENDIF        
C
      YDEL = ZCON(10) / (ZCON(9) - ZCON(8))
      XDEL = ZCON(11) / (ZCON(7) - ZCON(6))
      GDEL = AMIN1(XDEL,YDEL)
      IF(GDEL.LE.ZCON(21)) ZCON(21) = .4 * GDEL
C     END ADDED CODE
      DASHD = ZCON(22)/ZCON(21) + .5
      DASHU = ZCON(23)/ZCON(21) + .5
      IF((ZCON(22).GT.0.).AND.(DASHD.LT.1.)) DASHD = 1.
      IF((ZCON(23).GT.0.).AND.(DASHU.LT.1.)) DASHU = 1.
      NDASHD = DASHD
      NDASHU = DASHU
C
      IF (NEX1-1) 1000,10,10
   10 IF (NEX2-IN1) 20,20,1000
   20 IF (NEY1-1) 1000,30,30
   30 IF (NEY2-IN2) 40,40,1000
   40 IF (IN3-NEX2+NEX1-1) 1000,100,100
  100 IF (IN4-NEY2+NEY1-1) 1000,200,200
c
200   continue
cccccccccc  200 CALL METAZZ(999,0,0,0,0,'0')
c
      IF(ZCON(20)) 205,1000,205
  205 IF (ZCON(51)) 300,210,210
  210 SAVLIS = Z(166)
      CALL KW1Z (166,ZCON(51))
  300 IF (ZCON(52)) 400,310,310
  310 SAVLIN = Z(167)
      CALL KW1Z (167,ZCON(52))
  400 IF (ZCON(53)) 500,410,410
  410 SAVCHS = Z(172)
      CALL KW1Z (172,ZCON(53))
  500 IF (ZCON(54)) 600,510,510
  510 SAVCHI = Z(173)
      CALL KW1Z (173,ZCON(54))
  600 IF (ZCON(25)) 610,700,610
  610 SAVSIZ = Z(164)
      CALL KW1Z (164,ZCON(26))
  620 SAVSPA = Z(47)
      CALL KW1Z (47,ZCON(27))
      IF (ZCON(28)) 660,630,630
  630 IF (ZCON(28)-1.) 650,650,640
  640 WRITE(LBLFMT,645) ZCON(28)
  645 FORMAT(2H(F,F4.1,1H))
      GO TO 670
  650 LBLFMT = LABFMT
      GO TO 670
  660 ZZ = ABS(ZCON(28))
      WRITE(LBLFMT,665) ZZ
  665 FORMAT(2H(E,F4.1,1H))
  670 HDEL = CHDISP/Z(176)
      ICK = ZCON(26) + 1.
      VDEL = (CHDISP+CSIZE(ICK)*.5)/Z(177)
  700 IF (ZCON(48).EQ.0.) GO TO 703
      IF (ZCON(55).NE.0.) GO TO 701
c
c      CALL KW1T
c
      GO TO 703
  701 CONTINUE
C
CCCC        PRINT 702
C
CCCKW  702 FORMAT(//' NO CHANGE MADE IN CONTOURING MODE ARRAY SINCE LAST CALL
CCCKW     1 TO KWMICN.'//)
C
  703 IF (ZCON(33) .LE. 0.) GO TO 1703
      INDEX = 0
      IFLIPX = 0
      IFLIPY = 0
c
c
c
c
 1703    CALL KW1E (D,IN1,IN2,W,IN3,IN4,H,IFLAG)
c
c
c
c
  704 IF (SAVLIS) 710,705,705
  705 CALL KW1Z (166,SAVLIS)
      SAVLIS = -1.
  710 IF (SAVLIN) 720,715,715
  715 CALL KW1Z (167,SAVLIN)
      SAVLIN = -1.
  720 IF (SAVCHS) 730,725,725
  725 CALL KW1Z (172,SAVCHS)
      SAVCHS = -1.
  730 IF (SAVCHI) 740,735,735
  735 CALL KW1Z (173,SAVCHI)
      SAVCHI = -1.
  740 IF (SAVSIZ) 750,745,745
  745 CALL KW1Z (164,SAVSIZ)
      SAVSIZ = -1.
  750 IF (SAVSPA) 760,755,755
  755 CALL KW1Z (47,SAVSPA)
      SAVSPA = -1.
  760 IF (ZCON(34)) 800,900,800
C
  800 CONTINUE
C
C     FILL IN WHEN CENTER IS IMPLEMENTED.
C
  900 IF (ZCON(42)) 2000,2000,950
  950 CONTINUE
C
C     FILL IN WHEN SHADE IS IMPLEMENTED.
C
 1000 CONTINUE
C
C     SECTION TO IMPLEMENT DIAGNOSTICS
      IF (ZCON(49).EQ.0.) GO TO 2000
CC
       IFLAG = 2
CCCCC      PRINT 1005
CCCKW 1005 FORMAT(74H0ERROR IN CONTOURING MODE ARRAY ELEMENT VALUE. NO CONTOU
CCCKW    1RING WILL BE DONE.)
C
      IF(IERR.NE.0) GO TO 2000
      IERR = 1
CCC      PRINT 1010
CCCKW 1010 FORMAT(1H+,74X,39HCONTOURING MODE ARRAY PRINTOUT FOLLOWS.)
c
c      CALL KW1T
C
 2000 CONTINUE
c
      if (NUM888.NE.0) CALL KWFLUSH
      NUM888 = 0
      RETURN
      END
C
C
CC
      SUBROUTINE KW1B (VALUE,CHARS,NCHAR)
      CHARACTER * 8   LBLFMT
      CHARACTER * 8   CHARS,CHAR8
      CHARACTER * 1   IBLANK
      COMMON /KWCMCN/ DUM(6),LBLFMT,DUMM(9)
      COMMON /KWIGCN/  ZCON(55)
      DATA IBLANK /' '/
      CHAR8 = '        '
      CHARS = CHAR8
c
11     format (i8)
10     format (f8.0)
             write (chars,10) value
c
c      WRITE(CHARS,LBLFMT) VALUE
c
      IF (ZCON(28)) 400,100,100
  100 IF (ZCON(28)-1.) 200,200,400
  200 IVALUE = VALUE
c
       write (chars,11) ivalue
c 
c      WRITE(CHARS,LBLFMT) IVALUE
c
      ID = 8
  250 IF(CHARS(ID:ID).EQ.IBLANK) GO TO 300
      ID = ID - 1
      IF(ID.GT.0) GO TO 250
  300 NCHAR = 8 - ID
      IF(NCHAR.NE.0) CHAR8(1:NCHAR) = CHARS(ID+1:8)
      CHARS = CHAR8
      RETURN
c
 400   write (chars,10) value
c
c  400 WRITE(CHARS,LBLFMT) VALUE
c
      ID = 1
  450 IF(CHARS(ID:ID).NE.IBLANK) GO TO 500
      ID = ID + 1
      IF(ID.LE.8) GO TO 450
      ID = 8
      GO TO 300
  500 CHAR8(1:9-ID) = CHARS(ID:8)
      CHARS = CHAR8
      ID = INDEX(CHARS,IBLANK)
      NCHAR = ID-1
      IF(NCHAR.LT.0) NCHAR = 8
      RETURN
      END
C
C
C
      SUBROUTINE KW1E (HH,IN1,IN2,RGRID,IN3,IN4,H,IFLAG)
C
CC      INTEGER*2 RGRID
      COMMON /KWSTRN/SMHI,SMWI,X,Y,XGRID,YGRID,CUTOF,SQHI,SQWI,TMAX,XPP,
     2YPP,CGIG,U,V,NXUX,JDOO,NUVX,NUVY,YORTH,SOUTH,EAST,WEST,CLIT,CBIG,
     3LCLX,LCLY,INCROS,QINC,CLOSIT,PVAL,PVOL,NENTER,HINUM,NMX1,NMY1,
     4NMX11,NMY11,MOSINC,VALLIN,HINC,MAXCRD,WHAT,LDASH1,LDASH2,DASHER,
     5DOLABS,OUTS,MMER,MM,DELL,XO,YO
      COMMON /KWIGCN/ ZCON(55)
      COMMON /KWIGS/ Z(200)
      COMMON /KWCMCN/ NEX1,NEX2,NEY1,NEY2,NDASHD,NDASHU,DMK(11)
      COMMON /KWCHOP/ MBLK,BND(4,1)
      EQUIVALENCE (HI,ZCON(10)),(WID,ZCON(11)),(PLTINC,ZCON(21)),
     1(SAMCON,ZCON(19)),(CONINT,ZCON(20)),(ZLIT,ZCON(17)),(ZBIG,ZCON(18)
     2),(ANORTH,ZCON(12)),(ASOUTH,ZCON(13)),(AEAST,ZCON(14)),(AWEST,
     3ZCON(15)),(XLABEL,ZCON(25)),(DUPLAB,ZCON(33)),(SMOOTH,ZCON(24))
      LOGICAL   DASHER,DOLABS,OUTS
      DIMENSION HH(IN1,IN2),RGRID(IN3,IN4),HEN(5),H(3,1)
      DATA IMAP/0/
C
C    NHC SUBROUTINE FOR CONTOURING SCALAR FIELD ON CALCOMP OR MILGO TYPE
C              ELBERT HILL     ---FALL, 1970--
C
      IFLAG = 0
      LEVEL = ZCON(44)
      III = 1
      SAVZ = 0.
      MMER = ZCON(45)
      MM = Z(175)
      DELL = ABS(Z(174)) * .5
      XO = Z(10) + .4
      YO = Z(11) + .4
      MBLK = ZCON(47)
      MAXCRD=0
      WHAT=-99.
      CONINC=CONINT
      IF(CONINC.NE.0.)GO TO 3
      I = IMAP + 1
C
      IF(ZCON(49).NE.0.) THEN
CCC      PRINT 2,I
         IFLAG = 3
      ENDIF
CCCKW    2 FORMAT(/,2X,3HMAP,I3,14H ZERO INTERVAL)
C
      GO TO 120
    3 LDASH1 = NDASHD
      LDASH2=NDASHU
      DASHER=.FALSE.
      IF(LDASH2.GT.0.AND.LDASH1.GT.0)DASHER=.TRUE.
      HINUM=XLABEL
      DOLABS=.FALSE.
      IF(HINUM.NE.0.) DOLABS = .TRUE.
      IF(CONINC.LT.0.)CONINC=-CONINC
      PVOL=.005*CONINC
      MOSINC=0
      VALLIN=-989898.989
      NUVX=NEX2-NEX1+1
      NUVY=NEY2-NEY1+1
      IF(NUVX.GT.3.AND.NUVX.LE.IN3.AND.NUVY.GT.3.AND.NUVY.LE.IN4)GO TO 8
CCC
      IF (ZCON(49).NE.0.) THEN
CCC       PRINT 7, NEX1,NEX2,NUVX,NEY1,NEY2,NUVY
          IFLAG = 4
      ENDIF
CCCKW    7 FORMAT(/,10X,23HBAD ARRAY LIMITS. SKIP./10X,3I10/10X,3I10)
CCCC
      GO TO 120
C       SKIP IF NUVX OR NUVY LESS THAN 4
    8 YORTH=HI-ANORTH
      SOUTH=ASOUTH
      EAST=WID-AEAST
      WEST=AWEST
      IF(WEST.LT.0.)WEST=0.
      IF(EAST.GT.WID)EAST=WID
      IF(SOUTH.LT.0.)SOUTH=0.
      IF(YORTH.GT.HI)YORTH=HI
      QINC=PLTINC
      CLIT=QINC/1.99
      CBIG=QINC/2.
      TMAX=4.0*(YORTH-SOUTH+EAST-WEST)
      XGRID=WID/FLOAT(NUVX-1)
      YGRID=HI/FLOAT(NUVY-1)
      HINC=XGRID
      IF(YGRID.LT.XGRID)HINC=YGRID
      X=SMOOTH
      IF(X.LT..25.OR.X.GT.7.5)X=1.0
      HINC=X*HINC
      CUTOF=SQRT(XGRID*XGRID+YGRID*YGRID)+.01
      CLOSIT=.04
C     CLOSIT IS VALUE FOR CLOSED CONTOUR KW1C
      NMX1=NEX1
      NMY1=NEY1
      NMX11=NMX1-1
      NMY11=NMY1-1
      NEX4=NEX1-1
      NEY4=NEY1-1
C
C       NEXT DETERMINE MAX AND MIN VALUES IN SCALAR FIELD
      ZMAX=HH(NEX1,NEY1)
      ZMIN=ZMAX
      DO 30 I=NEX1,NEX2
      DO 30 J=NEY1,NEY2
      IF(HH(I,J).GT.ZMAX)ZMAX=HH(I,J)
      IF(HH(I,J).LT.ZMIN)ZMIN=HH(I,J)
   30 CONTINUE
      IF(ZCON(16)) 27,26,27
   26 IF(ZMAX.GT.ZBIG) ZMAX = ZBIG
      IF(ZMIN.LT.ZLIT)ZMIN=ZLIT
      GO TO 28
   27 ZCON(17) = ZMIN
      ZCON(18) = ZMAX
C        NEXT DETERMINE BOTTOM STARTING VALUE FOR CONTOUR LOOP
   28 PVAL = SAMCON
      DL = CONINC * .0001
      ZMIN = ZMIN - DL
      ZMAX = ZMAX + DL
   32 IF(PVAL.GT.ZMIN)GO TO 34
      PVAL=PVAL+CONINC
      GO TO 32
   34 IF(PVAL-CONINC.LT.ZMIN)GO TO 35
      PVAL=PVAL-CONINC
      GO TO 34
C
   35 XPP=0.
      YPP=0.
      N1=NUVX-1
      N2=NUVY-1
C
C     CONTOUR LOOP STARTS BELOW AT STATEMENT 36
C      THIS LOOP DETERMINES WHERE TO START A NEW CONTOUR, THEN CALLS
C        SUBROUTINE CONLIN TO DRAW EACH CONTOUR.  EXIT IS MADE WHEN
C      ALL CONTOURS COMPLETED.
C
C     THERE ARE 2 SCANS FOR EACH CONTOUR VALUE. FIRST WITH VARIABLE OUTS
C      FALSE SELECTS ONLY CONTOURS ENTERING GRID FROM OUTSIDE EDGES.
C       SECOND SCAN WITH OUTS TRUE SELECTS REMAINING INNER CONTOURS.
C      STARTING POINT CLOSEST TO PLOT PEN POSITION IS SELECTED IN EACH C
C
C
   36 IF(PVAL.GT.ZMAX) GO TO 110
c
c
      IF(LEVEL) 3990,3990,3900
 3900 DO 3901 L=III,LEVEL
      IF(ABS(H(1,L)-PVAL).LT.DL) GO TO 3920
 3901 CONTINUE
      GO TO 3990
 3920 SAVZ = 1.
      SAVZLW = Z(166)
      SAVZLI = Z(167)
      SAVSPA = Z(174)
      SAVNL = Z(175)
      IF (H(2,L)) 3921,3921,3930
 3921 IF (H(2,L)+7.) 3922,3925,3925
 3922 CONTINUE
C
      IF (ZCON(49).NE.0.) THEN
CCC       PRINT 3923, L,H(2,L)
          IFLAG = 5
      ENDIF
C
CCCKW 3923 FORMAT(/' INVALID LINE WEIGHT SPECIFICATION COLUMN = ',I5,
CCCKW     1      '   VALUE = ', F10.2/)
      GO TO 3989
 3925 CALL KW1Z (166,ABS(H(2,L)))
      IF (H(3,L)) 3989,3926,3926
 3926 CALL KW1Z (167,H(3,L))
      GO TO 3989
 3930 Z(174) = H(2,L)
      DELL = ABS(Z(174)) * .5
      IF (H(3,L)) 3940,3935,3935
 3935 Z(175) = H(3,L)
      GO TO 3988
 3940 IXNO = H(2,L) * Z(176) / 10. + 1.
      IYNO = H(2,L) * Z(177) / 10. + 1.
      Z(175) = AMAX0(IXNO,IYNO)
 3988 MM = Z(175)
 3989 H(2,L) = H(2,L) - 100000.
 3990 OUTS = .FALSE.
      DO 37 I=1,N1
      DO 37 J=1,N2
   37 RGRID(I,J)=0
   38 DZ=999999.
      IF(OUTS) GO TO 1050
      I = 1
      J = 0
      M = -IN3 + 1
1010  J = J + 1
      IF(J .GT. N2) GO TO 1019
      M = M + IN3
      IF(RGRID(M,1)-1) 600,1010,600
1019  I = 1
      M = IN3*N2 - IN3 + 1
1020  I = I + 1
      IF(I .EQ. N1) GO TO 1030
      J = 1
      IF(RGRID(I,1)-1) 600,1024,600
1024  J = N2
      M = M + 1
      IF(RGRID(M,1)-1) 600,1020,600
1030  I = N1
      J = 0
      M = N1 - IN3
1040  J = J + 1
      IF(J .GT. N2) GO TO 102
      M = M + IN3
      IF(RGRID(M,1)-1) 600,1040,600
1050  K1 = -IN3
      I = 0
1060  I = I + 1
      IF(I .GT. N1) GO TO 102
      J = 0
      K1 = K1 + 1
      M = K1
1070  J = J + 1
      IF(J .GT. N2) GO TO 1060
      M = M + IN3
      IF (RGRID(M,1) - 1) 600,1070,1070
600   CONTINUE
      II=NEX4+I
      JJ=NEY4+J
      HEN(1)=HH(II,JJ)
      HEN(2)=HH(II,JJ+1)
      HEN(3)=HH(II+1,JJ+1)
      HEN(4)=HH(II+1,JJ)
      PLARGE = PVAL + PVOL
      PSMALL= PVAL - PVOL
      DO 400 K = 1,4
      T = HEN(K)
      IF((T .GT. PLARGE) .OR. (T .LT. PSMALL)) GO TO 400
      HEN(K) = PLARGE
      IF(T .LT. PVAL) HEN(K) = PSMALL
400   CONTINUE
      IF(OUTS)GO TO 250
      NENN=1
      IF(I.EQ.1.AND.HEN(1).GT.PVAL.AND.HEN(2).LT.PVAL)GO TO 601
      NENN=3
      IF(I.EQ.N1.AND.HEN(3).GT.PVAL.AND.HEN(4).LT.PVAL)GO TO 601
      NENN=4
      IF(J.EQ.1.AND.HEN(4).GT.PVAL.AND.HEN(1).LT.PVAL)GO TO 601
      NENN=2
      IF(J.EQ.N2.AND.HEN(2).GT.PVAL.AND.HEN(3).LT.PVAL)GO TO 601
      GO TO 602
250   HEN(5) = HEN(1)
      DO 410 K = 1,4
      IF(HEN(K) .GT. PVAL .AND. HEN(K+1) .LT. PVAL) GO TO 408
410   CONTINUE
      GO TO 602
  408 NENN=K
  601 IF (RGRID(I,J) .EQ. 0 .OR. OUTS) GO TO 640
      I1 = RGRID(I,J)/10
      I2 = RGRID(I,J) - 10*I1
      IF (I1 .EQ. NENN .OR. I2 .EQ. NENN) GO TO 100
  640 GO TO (340,342,344,346), NENN
  602 IF (RGRID(I,J) .EQ. 0) RGRID(I,J) = 1
      GO TO 100
  340 Y=YGRID*(FLOAT(J-1)+(PVAL-HEN(1))/(HEN(2)-HEN(1)))
      X=XGRID*FLOAT(I-1)
      GO TO 45
  342 X=XGRID*(FLOAT(I-1)+(PVAL-HEN(2))/(HEN(3)-HEN(2)))
      Y=YGRID*FLOAT(J)
      GO TO 45
  344 Y=YGRID*(FLOAT(J-1)+(PVAL-HEN(4))/(HEN(3)-HEN(4)))
      X=XGRID*FLOAT(I)
      GO TO 45
  346 X=XGRID*(FLOAT(I-1)+(PVAL-HEN(1))/(HEN(4)-HEN(1)))
      Y=YGRID*FLOAT(J-1)
   45 D=(X-XPP)*(X-XPP)+(Y-YPP)*(Y-YPP)
      IF(D.GE.DZ)GO TO 100
      DZ=D
      NENTER=NENN
      LCLX=I
      LCLY=J
      XTT=X
      YTT=Y
  100 CONTINUE
      IF(OUTS) GO TO 1070
      IF(I .EQ. 1) GO TO 1010
      IF(I .EQ. N1) GO TO 1040
      IF(J .EQ. 1) GO TO 1024
      GO TO 1020
102   CONTINUE
      IF(DZ.GE.999990.)GO TO 105
      IF(RGRID(LCLX,LCLY).EQ.0)RGRID(LCLX,LCLY)=1
      X=XTT
      Y=YTT
C
C         NEXT CALL SUBROUTINE KW1J TO ACTUALLY DRAW CONTOUR WITH VALU
C
C
C
      CALL KW1J(HH,IN1,IN2,RGRID,IN3,IN4)
C
C      NOW GO BACK TO INNER LOOP TO SEE IF THERE ARE OTHER PVAL CONTOURS
C      TO BE DRAWN.
C
      GO TO 38
  105 IF(OUTS)GO TO 612
      OUTS=.TRUE.
      GO TO 38
  612 PVAL=PVAL+CONINC
C        INCREMENT CONTOUR AND GO TO TOP OF LOOP FOR NEXT CONTOUR
C
C     KWSTORE LINE PARAMETERS
C
      IF(SAVZ) 109,109,613
  613 CALL KW1Z (166,SAVZLW)
      CALL KW1Z (167,SAVZLI)
      Z(174) = SAVSPA
      Z(175) = SAVNL
      MM = Z(175)
      DELL = ABS (Z(174))*.5
      SAVZ = 0.
  109 IF(III.LE.1) GO TO 36
  110 IF(LEVEL) 200,200,130
  130 IF (III.GT.LEVEL) GO TO 193
      DO 190 L = III,LEVEL
      IF(H(2,L)+7.) 190,135,135
  190 CONTINUE
      GO TO 193
  135 III = L + 1
      PVAL = H(1,L)
      GO TO 3920
  193 DO 195 I = 1,LEVEL
      H(2,I) = H(2,I) + 100000.
  195 CONTINUE
  200 CONTINUE
      IMAP=IMAP+1
      IF(ZCON(49).EQ.0.) RETURN
CCC      PRINT 115, IMAP
CCC  115 FORMAT(/,10X,11HCONTOUR MAP,I3,10H FINISHED.)
CCC      PRINT 116, MOSINC,VALLIN,MAXCRD,WHAT
CCC  116 FORMAT(12X,21HMOST LINE INCREMENTS ,I5,12H ON CONTOUR ,F10.2,/,12X
CCC     2,12HMOST SQUARES,I4,12H ON CONTOUR ,F10.2,/)
  120 RETURN
      END
C
C
C
C
      SUBROUTINE KW1H (NO,VALUE)
C----------------------------MACHINE DEPENDANCIES
C     NONE
C----------------------------END
CCC   COMMON /KWIGS/ BMODES(200)
CCC   CHARACTER * 48 AM(45)
CCC   CHARACTER * 16 A3(9)
CCC   CHARACTER * 8 EM(45),E3(9)
CCC   EQUIVALENCE (B3,I1)
CCC   DATA MAXI /16777215/
CCC   DATA AM(1) / 'ILLEGAL MODE ELEMENT POSITION NUMBER           I'/
CCC   DATA EM(1) /' GETSMG.'/
CCC   DATA AM(2) / 'ILLEGAL CHARACTER COUNT                        I'/
CCC   DATA EM(2) /' LEGNDG.'/
CCC   DATA AM(3) / 'ILLEGAL NUMBER (OPERATION CODE)                I'/
CCC   DATA EM(3) /' LINESG.'/
CCC   DATA AM(4) / 'ILLEGAL KWIGS OUTPUT TAPE NUMBER                 I'/
CCC   DATA EM(4) /' KW1P.'/
CCC   DATA AM(5) / 'ILLEGAL FORMAT CODE                            I'/
CCC   DATA EM(5) /' NUMBRG.'/
CCC   DATA AM(6) / 'XMAX .LE. XMIN OR YMAX .LE. YMIN               I'/
CCC   DATA EM(6) /' KWOBJG.'/
CCC   DATA AM(7) / 'ILLEGAL FRAME ADVANCE COUNT                    I'/
C     DATA EM(7) /' PAGEG. '/
C     DATA AM(8) / 'ILLEGAL NUMBER OF POINTS TO PLOT               I'/
C     DATA EM(8) /' POINTG.'/
C     DATA AM(9) / 'ILLEGAL NUMBER OF LINE SEGMENTS TO DRAW        I'/
C     DATA EM(9) /' SEGMTG.'/
C     DATA AM(10)/ 'ILLEGAL NUMBER OF TABS                         I'/
C     DATA EM(10)/' TABSG. '/
C     DATA AM(11)/ 'ILLEGAL NUMBER OF LINES TO DRAW                I'/
C     DATA EM(11)/' KW1N.'/
C     DATA AM(12)/ 'GRID IS TOO SMALL TO DRAW                      I'/
C     DATA EM(12)/' GRIDG. '/
C     DATA AM(13)/ 'ILLEGAL CHARACTER COUNT OR FORMAT FOR LABELS   I'/
C     DATA EM(13)/' LABELG.'/
C     DATA AM(14)/ 'ILLEGAL CHARACTER COUNT                        I'/
C     DATA EM(14)/' TITLEG.'/
C     DATA AM(15)/ 'ILLEGAL ADJUSTMENT MODE PARAMETER              I'/
C     DATA EM(15)/' SETUPG.'/
C     DATA AM(16)/ 'XMAX .EQ. XMIN OR YMAX .EQ. YMIN               I'/
C     DATA EM(16)/' KWSUBJ.'/
C     DATA AM(17)/ 'ILLEGAL CODE FOR GRID AXIS TO BE LABELLED      I'/
C     DATA EM(17)/' LABELG.'/
C     DATA AM(18)/ 'GRID IS TOO SMALL TO LABEL                     I'/
C     DATA EM(18)/' LABELG.'/
C     DATA AM(19)/ 'X OR Y SUBJECT SPACE IS ZERO                   I'/
C     DATA EM(19)/' LABELG.'/
C     DATA AM(20)/ 'ILLEGAL GRID LINE EMPHASIS VALUE               I'/
C     DATA EM(20)/' GRIDG. '/
C     DATA AM(21)/ 'NOT ENOUGH ROOM TO DRAW GRID                   I'/
C     DATA EM(21)/' SETUPG.'/
C     DATA AM(22)/ 'GRID LINE DENSITY .LE. ZERO                    I'/
C     DATA EM(22)/' SETUPG.'/
C     DATA AM(23)/ 'ILLEGAL MODE ELEMENT POSITION NUMBER           I'/
C     DATA EM(23)/' KW1Z.'/
C     DATA AM(24)/ 'CANNOT FIT GRID ON FRAME                       I'/
C     DATA EM(24)/' SETUPG.'/
C     DATA AM(25)/ 'ILLEGAL CHARACTER COUNT                        I'/
C     DATA EM(25)/' TEXTG. '/
C     DATA AM(26)/ 'CANNOT FIT GRID LABELS ON FRAME                I'/
C     DATA EM(27)/' LABELG.'/
C     DATA AM(27)/ '                                                '/
C     DATA EM(27)/'        '/
C     DATA AM(28)/ 'ILLEGAL NUMBER OF POINTS TO PLOT               I'/
C     DATA EM(28)/' GRAPHG.'/
C     DATA AM(29)/ 'COORDINATE VALUE .LE. ZERO FOR LOG GRID        I'/
C     DATA EM(29)/' KWSUBJ.'/
C     DATA AM(30)/ 'MORE THAN 10 CYCLES IN LOG MODE GRID           I'/
C     DATA EM(30)/' SETUPG.'/
C     DATA AM(31)/ 'NO VECTOR CHARACTER FONT HAS BEEN INITIALIZED  I'/
C     DATA EM(31)/' VECTZZ.'/
C     DATA AM(32)/ 'X-COORDINATE VALUE OUT OF RANGE                I'/
C     DATA EM(32)/' SCALZZ.'/
C     DATA AM(33)/ 'Y-COORDINATE VALUE OUT OF RANGE                I'/
C     DATA EM(33)/' SCALZZ.'/
C     DATA AM(34)/ 'VECTOR CHARACTER NOT IN FONT                   I'/
C     DATA EM(34)/' VECTZZ.'/
C     DATA AM(35)/ 'NOT ENOUGH ROOM TO TITLE GRID                  I'/
C     DATA EM(35)/' TITLEG.'/
C     DATA AM(36)/ 'REQUEST FOR NON-EXISTENT VECTOR CHARACTER CASE I'/
C     DATA EM(36)/' VECTZZ.'/
C     DATA AM(37)/ 'BYTE LOCATION NUMBER .LE. ZERO                 I'/
C     DATA EM(37)/' NVECZ. '/
C     DATA AM(38)/ 'CHARACTER TOO CLOSE TO EDGE IN X-DIRECTION     I'/
C     DATA EM(38)/' METAZZ.'/
C     DATA AM(39)/ 'CHARACTER TOO CLOSE TO EDGE IN Y-DIRECTION     I'/
C     DATA EM(39)/' METAZZ.'/
C     DATA AM(40)/ 'TOO MANY GRID AXIS LABELS                      I'/
C     DATA EM(40)/' LABELG.'/
C     DATA AM(41)/ '                                                '/
C     DATA EM(41)/'        '/
C     DATA AM(42)/ 'ILLEGAL OPERATION CODE                         I'/
C     DATA EM(42)/' KW1U. '/
C     DATA AM(43)/ 'ILLEGAL CHARACTER COUNT                        I'/
C     DATA EM(43)/' FICHEG.'/
C     DATA AM(44)/ 'ILLEGAL VALUE FOR STARTING ANGLE               I'/
C     DATA EM(44)/' ARC80G.'/
C     DATA AM(45)/ 'ILLEGAL VALUE FOR ARC LENGTH                   I'/
C     DATA EM(45)/' ARC80G.'/
C     DATA A3(1)/ 'XMIN .EQ. XMAX  '/
C     DATA E3(1)/' SUBJ3D.'/
C     DATA A3(2)/ 'YMIN .EQ. YMAX  '/
C     DATA E3(2)/' SUBJ3D.'/
C     DATA A3(3)/ 'ZMIN .EQ. ZMAX  '/
C     DATA E3(3)/' SUBJ3D.'/
C     DATA A3(4)/ 'X .GT. XMAX     '/
C     DATA E3(4)/' PLOTS3.'/
C     DATA A3(5)/ 'X .LT. XMIN     '/
C     DATA E3(5)/' PLOTS3.'/
C     DATA A3(6)/ 'Y .GT. YMAX     '/
C     DATA E3(6)/' PLOTS3.'/
C     DATA A3(7)/ 'Y .LT. YMIN     '/
C     DATA E3(7)/' PLOTS3.'/
C     DATA A3(8)/ 'Z .GT. ZMAX     '/
C     DATA E3(8)/' PLOTS3.'/
C     DATA A3(9)/ 'Z .LT. ZMIN     '/
C     DATA E3(9)/' PLOTS3.'/
C     BMODES(15) = BMODES(15) + 1.
C      IF(BMODES(16)) 20,10,30
C   10 IF(NO-200) 21,22,22
C   21 PRINT 40, AM(NO),EM(NO),BMODES(6)
C      IF(NO.GT.21) GO TO 11
C      GO TO (12,12,12,12,16,18,12,12,12,12,12,18,18,12,12,18,12,18,18,
C     112,18), NO
C   11 NOO = NO - 21
C      GO TO (13,12,18,12,18,18,12,13,12,18,13,13,14,18,14,12,13,13,13,
C     1 18,14,12,12,12), NOO
C   12 PRINT 42, VALUE
C      GO TO 17
C   22 NOO = NO - 199
C      PRINT 41, A3(NOO),E3(NOO),BMODES(96)
C   13 PRINT 43, VALUE
C   17 PRINT 47
C      GO TO 18
C   14 PRINT 44, VALUE
C      GO TO 17
C   16 B3 = VALUE
C      IF(IABS(I1)-MAXI) 12,12,13
C   18 IF(BMODES(182)) 20,60,50
c   50 IF(BMODES(182)-BMODES(15)) 20,60,60
c   60 CALL ERRTRA
c      PRINT 46
c20    RETURN
c   30 IF((BMODES(16)-BMODES(15)).GE.0.) GO TO 10
c      GO TO 20
cC
c   40 FORMAT(1X,17H** KWIGS ERROR **  ,A48,9HN CALL TO,A8,36X,
c     17H FRAME ,F5.0)
c   41 FORMAT(1X,17H** KWIGS ERROR **  ,A16,31X,10HIN CALL TO,A8,36X,
c     17H FRAME ,F5.0)
c   42 FORMAT(1H+,97X,I15)
c   43 FORMAT(1H+,97X,F15.3)
c   44 FORMAT(1H+,97X,1HZ,Z8)
c   46 FORMAT(1X)
c   47 FORMAT(1H+,84X,13HBAD VALUE IS )
c
      return
      END     
C
C
C
C
      SUBROUTINE KW1I(IPP,XP,YP)
      COMMON /KWIGS/ Z(200)
      COMMON /KWGRNB/ IWORD(1),JJ,IBIG
      COMMON /KWSTRN/ DUM(49),MM,DELL,XO,YO
      DIMENSION IW(2)
      EQUIVALENCE (CX,Z(17)),(CY,Z(18)),(XS,Z(12)),(YS,Z(13)),
     1(HVY,Z(174))
c

             ihex1=2
             ihex2=3
             ihex3=3
c
c     DATA IHEX1/Z28000/, IHEX2/Z8000/, IHEX3/Z4000/
c
                 IF (HVY.EQ.0.) GOTO  930
      IP = IPP
      IF(IP.EQ.IHEX1) GO TO 920
      IF(XP-CX) 930,910,930
  910 IF(YP-CY) 930,960,930
  920 IF(HVY) 930,930,970
  930 continue
c                      { IY = YP * YS + YO
c                      { IW(1) = IOR (IP,IX)
c                      { IW(2) = IOR (IHEX3,IY)
c                      { DO 950 III = 1,2
c                      { IF(JJ.LT.IBIG) GO TO 940
c                      { CALL PACKZZ(0,JJ,IWORD)
c                      {  JJ = 0
c                      {  940 JJ = JJ + 1
c                      {  950 IWORD(JJ) = IW(III)
c

               CALL KWFR8N (IPP,XP,YP)
c
      CX = XP
      CY = YP
  960 RETURN
c
970   continue
c
      A1A2 = CX - XP
      B1B2 = CY - YP
      DENOMN = SQRT(A1A2*A1A2 + B1B2*B1B2)
      DLL = DELL
      IF(DENOMN.NE.0) DLL = DLL / DENOMN
      DX = DLL * B1B2
      DY = DLL * A1A2
      CALL KW1N(MM,CX-DX,CY+DY,XP-DX,YP+DY,CX+DX,CY-DY,XP+DX,YP-DY)
      IP = IHEX2
      GO TO 930
      END
C
C
C
C
C
      SUBROUTINE KW1J(HH,IN1,IN2,RGRID,IN3,IN4)
CCC      INTEGER*2  RGRID
      DIMENSION HH(IN1,IN2),RGRID(IN3,IN4)
      COMMON /KWSVLB/  PKWLBL 
      COMMON /KWSTRN/SMHI,SMWI,X,Y,XGRID,YGRID,CUTOF,SQHI,SQWI,TMAX,XPP,
     2YPP,CGIG,U,V,NXUX,JDOO,NUVX,NUVY,YORTH,SOUTH,EAST,WEST,CLIT,CBIG,
     3LCLX,LCLY,INCROS,QINC,CLOSIT,PVAL,PVOL,NENTER,HINUM,NMX1,NMY1,
     4NMX11,NMY11,MOSINC,VALLIN,HINC,MAXCRD,WHAT,LDASH1,LDASH2,DASHER,
     5DOLABS,OUTS,MER,MM,DELL,XO,YO
     COMMON /KWSVR1/ CIDE(4,2),XXPLOT(275,2),HAX(4),LEXE(4),
     2 XMAX(2),YMAX(2)
      DIMENSION XXSAV(2),YYSAV(2)
      EQUIVALENCE (XXSAV(2),XSAV),(YYSAV(2),YSAV)
      COMMON /KWIGCN/ ZCON(55)
      COMMON /KWIGS/ Z(200)
      COMMON /KWCHOP/ MBLK,BND(4,1)
      COMMON /KWCMCN/ DUM(13),DEL,YTRANS(2),MMARK
      COMMON /KWGRDQ/ NCORDM
      COMMON /KWGRDA/ CORHIP(3,300)
      EQUIVALENCE (PLTINC,ZCON(21))
CCC      DIMENSION  RGRID(IN3,IN4)
      LOGICAL   INCS,DOLABS,DASHER,CLOS,OUTS,DASHIX
C
c      DATA IHEX1/Z28000/, IHEX2/Z8000/
C
            ncordm = 15000
             ihex1 = 2
             ihex2 = 3
            PKWLBL = PVAL
C
C           THIS SUBROUTINE IS CALLED TO DRAW EACH INDIVIDUAL CONTOUR
C
C        IF DOLABS ENTERS AS TRUE, LABEL CONTOURS WITH HEIGHT HINUM
      DEL = 2. * PLTINC
      DSHMIN = (LDASH1 + LDASH2) * PLTINC * 3.
      DASHIX=DASHER
      LABLIT=9
      IF(DOLABS)LABLIT=0
      LABCNT = 0
      INCS=.FALSE.
      YMAX(1)=Z(3)-10.
      XMAX(1)=Z(2)
      YMAX(2) = Z(5) + 10.
      XMAX(2) = Z(4)
      NENST=NENTER
      IDPLOT=IHEX1
      NHARD=LDASH1
      NSOFT=LDASH2
      NUGG=0
      XX=X
      YY=Y
      XBIG=XX
      YBIG=YY
      LZX=LCLX
      LZY=LCLY
      IPER=IHEX1
      XD=0.
      YD=0.
      TOT=0.
      HYPTOT=0.
      NCORD=0
      CLOS=.FALSE.
      GO TO 400
C
C    END SETUP. BEGIN LOOP THAT PICKS EXACT STRAIGHT LINE SEGMENTED TRAV
C
  250 IF(NCORD.LT.NCORDM) GO TO 252
C
CCCC      IF(ZCON(49).NE.0.) PRINT 251, NCORD,PVAL
C
CCCKW  251 FORMAT(/,2X,I5,14H SQUARES LINE ,F10.5,2X,7HSHUTOFF)
C     SHUTOFF MESSAGE HERE INDICATES THAT THIS CONTOUR CROSSES MORE
C       THAN NCORDM GRID SQUARES.  ARRAY CORHIP IS TOO SMALL.  CONTOUR
C       WILL BE CUT OFF AT SQUARE NCORDM.  CURE IS TO INCREASE VALUE OF
C       NCORDM AND DIMENSION OF CORHIP, USING COMMON /KWGRDQ/ AND
C       COMMON /KWGRDA/ IN USER,S CALLING PROGRAM.
      GO TO 730
  252 NCORD=NCORD+1
      HYPTOT=HYPTOT+HYPE
      CORHIP(3,NCORD) = HYPE
      CORHIP(1,NCORD) = XXSQ
      CORHIP(2,NCORD) = YYSQ
      XD=XD+XXSQ
      YD=YD+YYSQ
      IF(NEXET.EQ.1)LZX=LZX-1
      IF(NEXET.EQ.3)LZX=LZX+1
      IF(NEXET.EQ.2)LZY=LZY+1
      IF(NEXET.EQ.4)LZY=LZY-1
      IF(LZX.LT.1.OR.LZX.GE.NUVX)GO TO 730
      IF(LZY.LT.1.OR.LZY.GE.NUVY)GO TO 730
      IF(LZX.EQ.LCLX.AND.LZY.EQ.LCLY.AND.SQRT(XD*XD+YD*YD).LE.CLOSIT.AND
     2.OUTS.AND.NCORD.GT.3)GO TO 701
      GO TO 700
  701 CLOS=.TRUE.
      IF(LABLIT.EQ.0)LABLIT=-1
      GO TO 730
  700 NENTER=NEXET+2
      IF(NEXET.GT.2)NENTER=NEXET-2
      XBIG=XIND
      YBIG=YIND
  400 NUMOUT=0
      OX1=XBIG-XGRID*FLOAT(LZX-1)
      IF(OX1.LT.0.)OX1=0.
      IF(OX1.GT.XGRID)OX1=XGRID
      OY1=YBIG-YGRID*FLOAT(LZY-1)
      IF(OY1.LT.0.)OY1=0.
      IF(OY1.GT.YGRID)OY1=YGRID
      I=LZX+NMX11
      J=LZY+NMY11
C
C        START EXIT POINT LOOP
C
      HAX(1)=HH(I,J)
      HAX(2)=HH(I,J+1)
      HAX(3)=HH(I+1,J+1)
      HAX(4)=HH(I+1,J)
      DO 401 II=1,4
      IF(ABS(HAX(II)-PVAL).GE.PVOL)GO TO 401
      IF(HAX(II).GE.PVAL)HAX(II)=PVAL+PVOL
      IF(HAX(II).LT.PVAL)HAX(II)=PVAL-PVOL
  401 CONTINUE
      NEXET=0
      DO 435 III=1,4
      CIDE(III,1)=-1.
      CIDE(III,2)=-1.
      I1=III
      I2=III+1
      IF(III.EQ.4)I2=1
C
C       STATEMENT BELOW SELECTS SIDES THAT HAVE EXIT POINTS
C
      IF(HAX(I1).LT.PVAL.AND.HAX(I2).GT.PVAL)GO TO 420
      GO TO 435
  420 NUMOUT=NUMOUT+1
      IF(NUMOUT.EQ.1)NN1=III
      IF(NUMOUT.EQ.2)NN2=III
      GO TO(422,424,426,428),III
  422 OY2 = ((PVAL-HAX(1))/(HAX(2)-HAX(III))) * YGRID
      OX2=0.
      GO TO 430
  424 OX2 = ((PVAL-HAX(2))/(HAX(3)-HAX(III))) * XGRID
      OY2=YGRID
      GO TO 430
  426 OY2 = ((PVAL-HAX(4))/(HAX(III)-HAX(4))) * YGRID
      OX2=XGRID
      GO TO 430
  428 OX2 = ((PVAL-HAX(1))/(HAX(III)-HAX(1))) * XGRID
      OY2=0.
  430 CIDE(III,1)=OX2
      CIDE(III,2)=OY2
  435 CONTINUE
C     UNLESS WE HAVE NULL POINT SQUARE, NUMOUT SHUD BE 1 WITH OUT AT OX2
      IF(NUMOUT.NE.1)GO TO 432
      NEXET=NN1
      GO TO 445
  432 IF(NUMOUT.EQ.2)GO TO 438
  431 CONTINUE  
C
CCCC      IF (ZCON(49).NE.0.) PRINT 436, LZX,LZY,NUMOUT,PVAL,XBIG,YBIG
C
CCCKW  436 FORMAT(/,2X,10HNO WAY OUT,5X,3I10,3F10.2,/)
      IFREEP=1
      GO TO 500
C
C     BEGIN SECTION THAT DETERMINES PROPER PATH THRU GRID SQUARE
C      CONTAINING HYPERBOLIC CONFIGURATION. (2 ENTRY AND 2 EXIT SIDES)
C
  438 IF(RGRID(LZX,LZY).GT.1)GO TO 442
      XID=CIDE(NN1,1)-OX1
      YID=CIDE(NN1,2)-OY1
      DAA=SQRT(XID*XID+YID*YID)
      XID=CIDE(NN2,1)-OX1
      YID=CIDE(NN2,2)-OY1
      DBB=SQRT(XID*XID+YID*YID)
      IF(DBB.LT.DAA)GO TO 440
  439 OX2=CIDE(NN1,1)
      OY2=CIDE(NN1,2)
      NEXET=NN1
      GO TO 414
  440 OX2=CIDE(NN2,1)
      OY2=CIDE(NN2,2)
      NEXET=NN2
  414 RGRID(LZX,LZY)=10*NENTER+NEXET
      GO TO 445
  442 I1=RGRID(LZX,LZY)/10
      I2=RGRID(LZX,LZY)-10*I1
      RGRID(LZX,LZY) = 1
      IF(I1.GT.0.AND.I2.GT.0.AND.I1.NE.I2.AND.NENTER.GT.0)GO TO 417
  415 CONTINUE 
C
CCCC      IF (ZCON(49).NE.0.) PRINT 416, LZX,LZY,I1,I2,NENTER
C
CCCKW  416 FORMAT(/,2X,12HBAD COL EXIT,2X,5I12)
      IFREEP=1
      GO TO 500
  417 LEXE(1)=0
      LEXE(2)=0
      LEXE(3)=0
      LEXE(4)=0
      LEXE(I1)=1
      LEXE(I2)=1
      DO 418 II=1,4
      IF(LEXE(II).EQ.0.AND.II.NE.NENTER.AND.CIDE(II,1).GT.(-.5).AND.CIDE
     2(II,2).GT.(-.5))GO TO 419
  418 CONTINUE
      GO TO 415
  419 NEXET=II
      OX2=CIDE(II,1)
      OY2=CIDE(II,2)
C                     END HYPERBOLIC GRID SQUARE SECTION
  445 XIND=OX2+XGRID*FLOAT(LZX-1)
      YIND=OY2+YGRID*FLOAT(LZY-1)
      IF(RGRID(LZX,LZY).EQ.0)RGRID(LZX,LZY)=1
      XXSQ=XIND-XBIG
      YYSQ=YIND-YBIG
      HYPE=SQRT(XXSQ*XXSQ+YYSQ*YYSQ)
      IF(HYPE.GE..0001.AND.HYPE.LE.CUTOF)GO TO 396
C
CCCC      IF (ZCON(49).NE.0.) PRINT 397,
CCCC     1LZX,LZY,NENTER,NEXET,XBIG,YBIG,XIND,YIND,OX1,OY1,OX2,
CCCC     2OY2,XXSQ,YYSQ,HYPE,NENST,LCLX,LCLY,NCORD,XX,YY
CCCKW  397 FORMAT(/,2X,4HHERE,4I10,/,2X,11F10.5,//,2X,4I10,5X,2F12.6,//)
C
C
      IFREEP=1
      GO TO 500
  396 GO TO 250
C
C     LINE SEGMENTED CONTOUR TRAVERSE NOW COMPLETE. NEXT, DIVIDE THIS
C      TRAVERSE INTO NRINC EQUAL SEGMENTS. THIS NUMBER IS FUNCTION NOT
C       ONLY OF LENGTH OF TRAVERSE, BUT OF INCOMING ARGUMENT SMOOTH, WHI
C         CONTROLS DEGREE OF SMOOTHING DESIRED.
C
  730 IF(NCORD.LE.MAXCRD)GO TO 732
      MAXCRD=NCORD
      WHAT=PVAL
  732 NRINC=HYPTOT/HINC+1.
      HANC=HYPTOT/FLOAT(NRINC)
      IF(.NOT.CLOS.AND.NCORD.GT.1.AND.NRINC.GT.1)GO TO 734
      IF(CLOS.AND.NCORD.GT.3.AND.NRINC.GT.2)GO TO 734
      GO TO 502
C
C     NEXT, SET UP ENTRY AND EXIT SLOPE DATA FOR FIRST SEGMENT BEFORE
C        ENTERING MAIN CURVILINEAR INTERPOLATE AND PLOT LOOP.
C
  734 XBEG=XX
      YBEG=YY
      IF(NRINC*HANC.LT.DSHMIN) DASHIX = .FALSE.
      H=0.
      XEND=XX
      YEND=YY
      DO 740 I=1,NCORD
      IF(H+CORHIP(3,I).GE.HANC) GO TO 742
      H = H + CORHIP(3,I)
      XEND = XEND + CORHIP(1,I)
  740 YEND = YEND + CORHIP(2,I)
      GO TO 745
  742 X = (HANC - H) / CORHIP(3,I)
      XEND = XEND + X * CORHIP(1,I)
      YEND = YEND + X * CORHIP(2,I)
  745 XXSQ=XEND-XBEG
      YYSQ=YEND-YBEG
      HYPE=SQRT(XXSQ*XXSQ+YYSQ*YYSQ)
      IF(HYPE.GE..0001)GO TO 750
  747 CONTINUE
C
CCCC     IF (ZCON(49).NE.0.) PRINT 748, XBEG,YBEG,PVAL,HYPE
C
CCCKW  748 FORMAT(/,2X,14HHYPE TOO SMALL,2X,4F12.6)
      IFREEP=1
      GO TO 500
  750 CANG=XXSQ/HYPE
      SANG=YYSQ/HYPE
      HYPM=HYPE
      IF(CLOS)GO TO 751
      COSBAC=CANG
      SINBAC=SANG
      GO TO 759
  751 XB=XX
      YB=YY
      H=0.
      DO 753 I=1,NCORD
      J=NCORD-I+1
      IF(H+CORHIP(3,J).GE.HANC) GO TO 755
      H = H + CORHIP(3,J)
      XB = XB - CORHIP(1,J)
  753 YB = YB - CORHIP(2,J)
      GO TO 757
  755 X = (HANC - H) / CORHIP(3,J)
      XB = XB - X * CORHIP(1,J)
      YB = YB - X * CORHIP(2,J)
  757 XXSQ=XBEG-XB
      YYSQ=YBEG-YB
      HYPE=SQRT(XXSQ*XXSQ+YYSQ*YYSQ)
      IF(HYPE.LT..0001)GO TO 747
      SINBAC=YYSQ/HYPE
      COSBAC=XXSQ/HYPE
  759 A=.5*ATAN2(SANG*COSBAC-CANG*SINBAC,CANG*COSBAC+SANG*SINBAC)
      SA=SIN(A)
      CA=COS(A)
      SENT=SINBAC*CA+COSBAC*SA
      CENT=COSBAC*CA-SINBAC*SA
      ENTIR=ATAN2(SENT,CENT)
      SSENT=SENT
      CCENT=CENT
C
C          ENTER MAIN CURVILINEAR INTERPOLATE AND PLOT LOOP
C
      IFREEP=0
      MMARK = 0
      DO 800 LUPE=1,NRINC
C
      IF(LUPE.NE.NRINC)GO TO 762
      IF(CLOS)GO TO 760
      SOUT=SANG
      COUT=CANG
      GO TO 200
  760 SOUT=SSENT
      COUT=CCENT
      GO TO 200
  762 XIND=XX
      YIND=YY
      ZANC=HANC*FLOAT(LUPE+1)
      H=0.
      DO 764 I=1,NCORD
      IF(H+CORHIP(3,I).GE.ZANC) GO TO 766
      H = H + CORHIP(3,I)
      XIND = XIND + CORHIP(1,I)
  764 YIND = YIND + CORHIP(2,I)
      GO TO 768
  766 X = (ZANC - H) / CORHIP(3,I)
      XIND = XIND + X * CORHIP(1,I)
      YIND = YIND + X * CORHIP(2,I)
  768 XXSQ=XIND-XEND
      YYSQ=YIND-YEND
      HYPE=SQRT(XXSQ*XXSQ+YYSQ*YYSQ)
      IF(HYPE.LT..0001)GO TO 747
      SINFOR=YYSQ/HYPE
      COSFOR=XXSQ/HYPE
      HYPFOR=HYPE
      A=.5*ATAN2(SINFOR*CANG-COSFOR*SANG,COSFOR*CANG+SINFOR*SANG)
      SA=SIN(A)
      CA=COS(A)
      SOUT=SANG*CA+CANG*SA
      COUT=CANG*CA-SANG*SA
      EXET=ATAN2(SOUT,COUT)
  200 HYP=HYPM
      IF(HYP.GT.QINC)GO TO 449
      IF(XEND.LT.WEST.OR.XEND.GT.EAST.OR.YEND.LT.SOUTH.OR.YEND.GT.YORTH)
     2GO TO 790
      IF(MBLK) 230,230,210
  210 DO 220 M = 1,MBLK
      IF(XEND.LT.BND(1,M).OR.XEND.GT.BND(2,M)) GO TO 220
      IF(YEND.LT.BND(3,M).OR.YEND.GT.BND(4,M))  GO TO 220
      GO TO 790
  220 CONTINUE
  230 IF(INCS) GO TO 446
      INCS=.TRUE.
      YTRANS(1)=YBEG
c
CCC      IF (MER .NE. 0) CALL KW1L (YTRANS)
c
      XSAV = XBEG
      YSAV = YBEG
c
      CALL KW1I (IHEX2,XBEG,YTRANS)
c
  446 I=IPER
      IF(DASHIX.AND.I.EQ.IHEX1) I=IDPLOT
      YTRANS(1) = YEND
c
CCCC      IF (MER .NE. 0) CALL KW1L (YTRANS)
      CALL KW1I(I,XEND,YTRANS)
c
      XXSAV(1) =XEND
      YYSAV(1) = YEND
      NUGG=NUGG+1
      TOT=TOT+HYP
      GO TO 790
C
C     BEGIN SNAKE INTERPOLATION FOR SEGMENT
C
C    ENTIR AND EXET ARE TRUE ENTRY AND EXIT DIRECTIONS AT ENDS OF SEGMEN
C       (SNAKELIKE INTERPOLATION IS MADE FOR FIT BETWEEN 2 END DIRECTION
C     SENT AND CENT ARE SINE AND COSINE OF TRUE ENTRY ANGLE
C     SOUT AND COUT ARE SINE AND COSINE OF TRUE EXIT ANGLE
C
C     SANG AND CANG ARE SINE AND COSINE OF STRAIGHT LINE ENTRY/EXIT CONN
C
C     BEGIN SECTION THAT INTERPOLATES AND PLOTS THRU SEGMENT
C
  449 S=SENT*CANG-CENT*SANG
      C=CENT*CANG+SENT*SANG
      C1=(2.*ATAN2(S,C))/HYP
      SING=SANG*C-CANG*S
      CING=CANG*C+SANG*S
      S=SOUT*CING-COUT*SING
      C=COUT*CING+SOUT*SING
      C2=(2.*ATAN2(S,C))/HYP
      TX=XBEG
      TY=YBEG
      IFREEP = 1
      NINC=0
      TYP=-CBIG
      HYPMAX=HYP-CLIT
      H25=.25*HYP
  450 TYP=TYP+QINC
      D1=TYP
      IF(D1.GT.H25)D1=H25
      D2=TYP-H25
      IF(D2.LT.0.)D2=0.
      SING=ENTIR-C1*TYP+C2*(D2-D1)
      TX=TX+QINC*COS(SING)
      TY=TY+QINC*SIN(SING)
C
C        END SNAKE INTERPOLATION SECTION---TRY AND FIGURE IT OUT AND GO
C     NEXT STORE POINTS THRU THIS SEGMENT FOR FINAL ADJUST AND PLOT
C
      IF(NINC.LT.275)GO TO 453
           zcon(49)= 0.
CCCC      IF(ZCON(49).NE.0.) PRINT 454, PVAL,XBEG,YBEG,XEND,YEND
CCCKW  454 FORMAT(/,2X,12HNINC SHUTOFF,2X,5F12.3)
C
C     IF SHUTOFF MESSAGE RECEIVED HERE, ARRAY XXPLOT IS TOO SMALL.
C     FOR INFREQUENT MESSAGES, DONT WORRY ABOUT IT, SINCE LACK OF
C        CLOSURE IS ADJUSTED OUT.  IF MESSAGE PERSISTS, EITHER INCREASE
C          PLOT INCREMENT LENGTH OR SIZE OF XXPLOT.
      GO TO 455
  453 NINC=NINC+1
      XXPLOT(NINC,1)=TX
      XXPLOT(NINC,2)=TY
      IF(TYP.LE.HYPMAX)GO TO 450
C
C      ADJUST FOR CLOSURE ERROR, THEN PLOT CURVE ALONG THIS SEGMENT.
C
  455 XER=(XEND-XXPLOT(NINC,1))/FLOAT(NINC)
      YER=(YEND-XXPLOT(NINC,2))/FLOAT(NINC)
      U=0.
      V=0.
      NUNC=0
C
C       BEGIN SEGMENT PLOT LOOP----DASHED OR SOLID CURVES-----
C       SUBROUTINE ENDER IS CALLED TO LABEL LINES
C
      DO 610 I=1,NINC
      U=U+XER
      V=V+YER
      X=XXPLOT(I,1)+U
      Y=XXPLOT(I,2)+V
      IF(X.LT.WEST.OR.X.GT.EAST.OR.Y.LT.SOUTH.OR.Y.GT.YORTH)GO TO 608
      IF(MBLK) 602,602,600
  600 DO 601 M = 1,MBLK
      IF(X.LT.BND(1,M).OR.X.GT.BND(2,M)) GO TO 601
      IF(Y.LT.BND(3,M).OR.Y.GT.BND(4,M)) GO TO 601
      MMARK = M
      GO TO 608
  601 CONTINUE
  602 IF(INCS) GO TO 603
      INCS=.TRUE.
      YTRANS(1)=YBEG
CCC      IF (MER .NE. 0) CALL KW1L (YTRANS)
      IF(IPER.EQ.IHEX1) CALL KW1I (IHEX2,XBEG,YTRANS)
  603 XPP=X
      YPP=Y
      XUX = XPP
      YUY = YPP
      IF(LABLIT.GT.0)GO TO 604
      YTRANS(1)=YUY
c
CCC      IF(MER.NE.0) CALL KW1L(YTRANS)
      IF(LABLIT.NE.0) GO TO 605
c
      IF(MMARK.EQ.0) CALL KWLABL(XUX,YUY,PVAL,1)
      IF(MMARK.NE.0) CALL KW1K(XUX,YUY,PVAL,1)
c
      LABCNT = LABCNT + 1
  605 LABLIT = 1
  604 IF(DASHIX.AND.IPER.EQ.IHEX1) GO TO 615
      YTRANS(1) = YUY
c
CCC      IF (MER .NE. 0) CALL KW1L (YTRANS)
      IF((MMARK.NE.0).AND.(.NOT.DOLABS)) IPER = IHEX2
      CALL KW1I(IPER,XUX,YTRANS)
c
      GO TO 609
  615 YTRANS(1)=YUY
c
CCC      IF (MER .NE. 0) CALL KW1L (YTRANS)
      IF((MMARK.NE.0).AND.(.NOT.DOLABS)) GO TO 620
      CALL KW1I(IDPLOT,XUX,YTRANS)
      GO TO 625
  620 CALL KW1I(IHEX2,XUX,YTRANS)
c
c

  625 IF(IDPLOT.EQ.IHEX2) GO TO 630
      NHARD=NHARD-1
      IF(NHARD.GT.0)GO TO 609
      IDPLOT=IHEX2
      NHARD=LDASH1
      GO TO 609
  630 NSOFT=NSOFT-1
      IF(NSOFT.GT.0)GO TO 609
      IDPLOT=IHEX1
      NSOFT=LDASH2
  609 IPER=IHEX1
      NUNC=NUNC+1
      MMARK = 0
      IF (.NOT.DOLABS) GO TO 610
      IF(YUY.LE.YMAX(1)) GO TO 6008
      YMAX(1) = YUY
      XMAX(1) = XUX
 6008 IF (YUY.GT.YMAX(2)) GO TO 610
      YMAX(2) = YUY
      XMAX(2) = XUX
      GO TO 610
  608 IPER=IHEX1
      IF(LABLIT.EQ.(-1)) LABLIT = 0
      IF(LABLIT.NE.1)GO TO 610
      YTRANS(1)=Y
c
c
CCCC      IF(MER.NE.0) CALL KW1L(YTRANS)
      IF(MMARK.EQ.0.) GO TO 6007
c      CALL KW1K(X,Y,PVAL,0)
c
      GO TO 6017
 6007 CONTINUE
      IF(ABS(X-EAST)-DEL) 6009,6010,6010
c
 6009 CALL KW1I(IHEX1,EAST,YTRANS)
      GO TO 6016
 6010 IF(ABS(X-WEST)-DEL) 6011,6012,6012
 6011 CALL KW1I(IHEX1,WEST,YTRANS)
      GO TO 6016
 6012 IF(ABS(Y-YORTH)-DEL) 6013,6014,6014
 6013 YTRAS = YORTH
CCCC      IF(MER.NE.0) CALL KW1L(YTRAS)
      CALL KW1I(IHEX1,X,YTRAS)
      GO TO 6016
 6014 IF(ABS(Y-SOUTH)-DEL) 6015,6016,6016
 6015 YTRAS = SOUTH
CCCC      IF(MER.NE.0) CALL KW1L(YTRAS)
      CALL KW1I(IHEX1,X,YTRAS)
 6016 CALL KWLABL(X,Y,PVAL,1)
c
c

 6017 CONTINUE
      LABCNT = LABCNT + 1
      LABLIT=0
  610 CONTINUE
C
C        END ADJUST AND PLOT SECTION
C
      NUGG=NUGG+NUNC
      TOT=TOT+QINC*FLOAT(NUNC)
      IF(TOT.LT.TMAX)GO TO 790
C
CCCC      IF (ZCON(49).NE.0.) PRINT 462, PVAL,TMAX
C
CCCKW  462 FORMAT(/,2X,16HREACHED TMAX ON ,2F12.4)
      GO TO 500
  790 IF(LUPE.EQ.NRINC)GO TO 800
      HYPM=HYPFOR
      SENT=SOUT
      CENT=COUT
      ENTIR=EXET
      SANG=SINFOR
      CANG=COSFOR
      XBEG=XEND
      YBEG=YEND
      XEND=XIND
      YEND=YIND
      IF((MMARK.NE.0).AND.(.NOT.DOLABS)) IPER = IHEX2
  800 CONTINUE
C
C        END MAIN CURVILINEAR INTERPOLATE AND PLOT LOOP
C
  500 IF(.NOT.CLOS.OR..NOT.DOLABS.OR.YMAX(1).LT..01) GO TO 501
      XPP=XMAX(1)
      YPP=YMAX(1)
      IF(LABCNT.EQ.0) CALL KWLABL(XMAX,YMAX,PVAL,2)
  501 IF(.NOT.CLOS.AND.LABLIT.EQ.1) CALL KWLABL(XUX,YUY,PVAL,1)
      IF(IFREEP.NE.0) GO TO 505
      IF(.NOT.DOLABS) GO TO 505
      IF(CLOS) GO TO 504
      CALL KWLABL (XXSAV,YYSAV,PVAL,1)
      CALL KWLABL (XSAV,YSAV,PVAL,1)
      GO TO 505
  504 CALL KWLABL (XXSAV,YYSAV,PVAL,2)
  505 CONTINUE
      IF(NUGG.LE.MOSINC)GO TO 502
      MOSINC=NUGG
      VALLIN=PVAL
  502 RETURN
      END
C
C
C
C
C 
      SUBROUTINE KW1K(X,Y,PVAL,ISW)
      CHARACTER*8 CHARS
      COMMON /KWIGS/ Z(200)
      COMMON /KWCHOP/ MBLK,BND(4,1)
      COMMON /KWCMCN/ DUM(8),HDEL,VDEL,DUMM(3),DEL,YY(2),M
      COMMON /KWSTRN/ DMK(48),MER,RHK(4)
c
        IHEX2 = 3
c       
       YTRANS = YY(1)
       AX = X
       AY = YTRANS
       IF (ISW.NE.0) GOTO 7007

       CX = Z(17)
       CY = Z(18)
       GOTO 7008
       
7007   CX = X
       CY = YTRANS
7008   CONTINUE
       IF (ABS(X-BND(1,M))-DEL) 7009,7010,7010
7009   AX = BND(1,M)
       GOTO 7016
7010   IF (ABS(X-BND(2,M))-DEL) 7011,7012,7012
7011   AX = BND(2,M)
       GOTO 7016
7012   IF (ABS(Y-BND(3,M))-DEL) 7013,7014,7014
7013   AY = BND(3,M)
7017   CONTINUE
CCC       IF (MER.NE.0) CALL KW1L(AY)
       GOTO 7016
7014   IF (ABS(Y-BND(4,M))-DEL) 7015,7020,7020
7015   AY = BND(4,M)
       GOTO 7017
7020   YA = CY
       GOTO 7021
7016   CONTINUE
       DELX = AX - CY
       DELY = AY - CY
       IF (ABS(DELX).GT.ABS(DELY)) GOTO 7018
       YA = CY + SIGN(VDEL,DELY)
7021   CONTINUE
       XA = CX
       MM = 0
       GOTO 7019
7018   YA = CY
       XA = CX + SIGN(HDEL,DELX)
       MM = 1
       IF (DELX.GT.0) MM = -1
7019   CALL KW1B (PVAL,CHARS,NCHAR)
       CALL KW1I (IHEX2,CX,CY)
C
       RETURN
       END
C
C
C
      SUBROUTINE KW1L (Y)
      RETURN
      END

C
      SUBROUTINE KW1N (NLINES,X1,Y1,X2,Y2,X3,Y3,X4,Y4)
c
                 ip3=3
                 ip2=2
          CALL KWFR8N (ip3,X1,Y1)
          CALL KWFR8N (ip2,X2,Y2)
          CALL KWFR8N (ip2,X3,Y3)
          CALL KWFR8N (ip2,X4,Y4)
C
30        CONTINUE
         RETURN
         END
C
C
C
C
      SUBROUTINE KWMODC
C
CCCC      DIMENSION D(55)
      COMMON /KWIGCN/ ZCON(55)
      COMMON /KWIGS/    Z(200)
C
      COMMON /KWPTCN/ A(55)
C
CC      DATA D/4HINIT, 8*1., 10*0., 1., .04, 2*0., 1.5,
CC     1          -1., 23., .9, .1, 5*0., 2HHL, 0., 1., 3*0., .9,
CC     2          8*0., 1., 0., -1., -1., -1., -1., 0. /
      DATA IFIRST/0/
C
      IF (IFIRST.NE.0) GO TO 5
      IFIRST = 1
      ZCON(1) = 0.
      A(1) = 4HINIT
      A(2) = 1.0
      A(3) = 1.0
      A(4) = 1.0
      A(5) = 1.0
      A(6) = 1.0
      A(7) = 1.0
      A(8) = 1.0
      A(9) = 1.0
      A(10)= 0.0
      A(11)= 0.0
      A(12)= 0.0
      A(13)= 0.0
      A(14)= 0.0
      A(15)= 0.0
      A(16)= 0.0
      A(17)= 0.0
      A(18)= 0.0
      A(19)= 0.0
      A(20)= 1.
      A(21)= 0.04
      A(22)= 0.0
      A(23)= 0.0
      A(24)= 1.5
      A(25)=-1.
      A(26)= 23.
      A(27)= .9
      A(28)= .1
      A(29)= 0.0
      A(30)= 0.0
      A(31)= 0.0
      A(32)= 0.0
      A(33)= 0.0
      A(34)=  2HHL
      A(35)= 0.0
      A(36)= 1.0
      A(37)= 0.0
      A(38)= 0.0
      A(39)= 0.0
      A(40)= 0.9
      A(41)= 0.0
      A(42)= 0.0
      A(43)= 0.0
      A(44)= 0.0
      A(45)= 0.0
      A(46)= 0.0
      A(47)= 0.0
      A(48)= 0.0
      A(49)= 1.0
      A(50)= 0.0
      A(51)=-1.0
      A(52)=-1.0
      A(53)=-1.0
      A(54)=-1.0
      A(55)= 0.0
C    
CCC      DO  3 I = 1,55
CCC    3 A(I) = D(I)
    5 CONTINUE
C
      DO 10 I=1,55
   10 ZCON(I) = A(I)
C
      ZCON(10) = ABS(Z(5)-Z(3))
      ZCON(11) = ABS(Z(4)-Z(2))
      A(10) = ZCON(10)
      A(11) = ZCON(11)
      B = 30. / Z(176)
      C = 30. / Z(177)
      ZCON(21) = AMIN1(B,C)
      A(21) = ZCON(21)
C
      RETURN
      END
C
C
C
C
      SUBROUTINE KW1P (ITAPE,ICAM)
C----------------------------MACHINE DEPENDANCIES
C     NONE
C----------------------------END
      COMMON /KWIGS/ AMODES(200)
      COMMON /KWOREC/ IGEOG
      COMMON /KWSTOR/ INTENS,IWIDTH,ISIZE,JROT,SPACE,XLINES
C MAXI = MAXIMUM INTEGER SIZE TO ALLOW.
      DATA MAXI /262144/, IFIRST /0/
C SAME FLAG TO TELL US IF S-C 4060 IS OPEN.
      IF (IFIRST .NE. 0) GO TO 1
      AMODES(1) = 0.
      IGEOG = 0
      IFIRST = 1
    1 A = AMODES(1)
C SET DEFAULT VALUES.
      CALL KW1W
c
60    RETURN
      END
C
C
C
C
      SUBROUTINE KWOBJG (XL,YL,XR,YU)
      COMMON/KWIGS/AMODES(200)
      IF(AMODES(8)-1.) 2,2,1
    1 CONO = 1.
      GO TO 3
    2 CONO = 16384.
    3 IF(XR-1.) 5,5,4
    4 CONN = 1.
      GO TO 6
    5 CONN = 16384.
    6 RAT = CONN/CONO
      AMODES(176) = AMODES(176)*RAT*(XR-XL)/(AMODES(8)-AMODES(6))
      AMODES(177) = AMODES(177)*RAT*(YU-YL)/(AMODES(9)-AMODES(7))
      AMODES(6)=XL
      AMODES(8)=XR
      AMODES(7)=YL
      AMODES(9)=YU
      AMODES(17) = AMODES(2) + SIGN(1.,(AMODES(2)-AMODES(4)))
      CALL KW1X(AMODES(17),0.,XS,DUM)
      IF(XS.LT.0.) AMODES(17) = (AMODES(2) + AMODES(4)) * .5
      K=1
      DO 50 I=1,2
      IF (AMODES(I+7)-AMODES(I+5)) 80,80,10
10    IF (AMODES(I+22)) 20,20,30
20    E=AMODES(I+1)
      G=AMODES(I+3)
      GO TO 40
30    E=AMODES(I+24)
      G=AMODES(I+26)
40    SCALE=(AMODES(I+7)-AMODES(I+5))*AMODES(I+18)/(G-E)
      OFFSET=(AMODES(I+5)*AMODES(I+18))-E*SCALE
      AMODES(I+11)=SCALE
      AMODES(I+9)=OFFSET
      SIZE=AMODES(I+39)*AMODES(45)*AMODES(I+18)/SCALE
      AMODES(I+41)=SIZE
      AMODES(I+63)=(1.+AMODES(K+60)-AMODES(K+59))/SIZE
      AMODES(I+131)= ABS(AMODES(I+139)*(AMODES(I+41)*AMODES(I+11)/
     1AMODES(I+18))/AMODES(I+39))
50    K=3
      RETURN
   80 CALL KW1H (6,0.0)
      RETURN
      END
C
C
C
      SUBROUTINE KW1S(XX,YY,IP)
      COMMON /MAINPAS/ XMNLON,YMNLAT
C             
                  X1 = XX 
                  Y1 = YY
c
             if (xmnlon.le.0.)  x1=x1-abs(xmnlon)  
             if (xmnlon.gt.0.)  x1=x1  + (xmnlon)
                   y1=YY
             if (ymnlat.le.0.0) y1=y1-abs(ymnlat)
             if (ymnlat.gt.0.0) y1=y1+ymnlat
C
               XPT = X1
               YPT = Y1 
c
               CALL KWTRAN (XPT,YPT,IP)
c
          RETURN
          END
C
C
C
C
      SUBROUTINE KW1T
C
      RETURN
      END
C
C
C
      SUBROUTINE KW1U (NCODE,X,Y,M,CHARS,HT)
      COMMON /KWIGS/ Z(200)
      COMMON /KWCHEI/ TAB(64)
      DIMENSION X(1),Y(1)
      INTEGER V
      CHARACTER * (*) NCODE,CHARS
      CHARACTER * 1 WORD(5),DOLR,CHAR1,ML,MC,MR
      CHARACTER * 2 MLR
      CHARACTER * 4 NCODEQ
      EQUIVALENCE (NCODEQ,ZCODE)
      DATA WORD /'L','U','S','C','N'/, DOLR /'$'/
      DATA SAVE /0./,SAVSPA /0./,HLSAVE /0./,CON1 /.70710656/,
     1     CON2 /.35714286/,CON3/.64285714/,CON4 /.71428571/
      DATA ML /'L'/,MC /'C'/,MR /'R'/,MLR /'LR'/
      N = M
      IF (Z(8)-1.) 5, 5, 6
    5 CON = 16384.
      GO TO 7
    6 CON = 1.
    7 CONTINUE
      HEIGHT = HT
      V = 0
      NROT = Z(165) + 1.5
      IF((NROT.EQ.3).OR.(NROT.EQ.7)) V = 1
      IF (HEIGHT) 10,100,20
   10 SAVE = Z(164)
      HEIGHT = ABS(HEIGHT)
   20 GO TO (30,50,40,50,30,50,40,50), NROT
C
C     MAKE TESTS ON NORMALIZED SPACE
C
   30 H = HEIGHT * ABS((Z(9)-Z(7))/(Z(5)-Z(3)))
      GO TO 60
   40 H = HEIGHT * ABS((Z(8)-Z(6))/(Z(4)-Z(2)))
      GO TO 60
   50 H = CON1 * HEIGHT * SQRT(((Z(8)-Z(6))/(Z(4)-Z(2))) ** 2 +
     1         ((Z(9)-Z(7))/(Z(5)-Z(3)))**2)
   60 H = H*CON
      DO 70 I=1,64
      IF (H.LT.TAB(I)) GO TO 80
   70 CONTINUE
      I = 64
   80 TT = I - 1
      CALL KW1Z (164,TT)
  100 IF (N) 340,340,110
  110 IF(NCODE.NE.ML) GO TO 120
  115 DEL = CON2 * Z(42+V)
      GO TO 170
  120 IW = 1
  122 LOC = INDEX(CHARS(IW:M),DOLR)
      IF(LOC.EQ.0) GO TO 1130
      LOC1 = LOC + IW
      IF(LOC1.GT.M) GO TO 1130
      CHAR1 = CHARS(LOC1:LOC1)
      DO 124 L = 1,5
      IF(CHAR1.NE.WORD(L)) GO TO 124
      N = N - 2
      GO TO 125
  124 CONTINUE
      LOC1 = LOC1 - 1
  125 IW = LOC1 + 1
      IF(IW.LE.M) GO TO 122
 1130 CONTINUE
      IF(NCODE.NE.MC) GO TO 130
      DEL = -.5 * (N-1) * Z(42+V) * Z(47)
      GO TO 170
  130 IF(NCODE.NE.MR) GO TO 140
      DEL = (CON3 - N) * Z(42 + V) * Z(47)
      GO TO 170
  140 IF(NCODE.NE.MLR) GO TO 350
      DEL = CON2 * Z(42+V)
      SAVSPA = Z(47)
      IF (N.EQ.1) GO TO 115
      SPACE = (SQRT((X(2)-X(1))**2+(Y(2)-Y(1))**2)-CON4*Z(V+42))/ (N-1)
      IF (SPACE.GE.CON4*Z(43)) GO TO 160
      IF (Z(164)) 160,160,150
  150 HEIGHT = ABS(SPACE)
      HLSAVE = Z(164)
      GO TO 20
  160 CALL KW1Z (47,SPACE/Z(42+V))
  170 GO TO (180,190,200,210,220,230,240,250), NROT
  180 DX = DEL
      DY = 0.
      GO TO 260
  190 DX = DEL * CON1
      DY = DX
      GO TO 260
  200 DX = 0.
      DY = DEL
      GO TO 260
  210 DY = DEL*CON1
      DX = - DY
      GO TO 260
  220 DX = -DEL
      DY = 0.
      GO TO 260
  230 DX = -DEL * CON1
      DY = DX
      GO TO 260
  240 DX = 0.
      DY = -DEL
      GO TO 260
  250 DX = DEL*CON1
      DY = - DX
  260 CONTINUE
      XDX = X(1) + DX
      YDY = Y(1) + DY
cccccccccccc      CALL LEGNDG (XDX,YDY,M,CHARS)
      IF (SAVSPA) 270,300,270
  270 CALL KW1Z (47,SAVSPA)
      SAVSPA = 0.
  300 IF (HLSAVE) 310,320,310
  310 CALL KW1Z (164,HLSAVE)
      HLSAVE = 0.
  320 IF (HT) 330,340,340
  330 CALL KW1Z (164,SAVE)
      SAVE = 0.
  340 RETURN
  350 NCODEQ = NCODE
      CALL KW1H(42,ZCODE)
      RETURN
      END
C
C
C
c
      SUBROUTINE KW1V (NTIMES)
C
      RETURN 
      END
c
C
C
      SUBROUTINE KW1W
C----------------------------MACHINE DEPENDANCIES
C     NONE
C----------------------------END
      COMMON/KWIGS/A(200)
C
      A(1) = 4060.
      A(2) = 0.
      A(3) = 0.
      A(4) = 16383.
      A(5) = 16383.
      A(6) = 0.
      A(7) = 0.
      A(8) = 1.
      A(9) = 1.
      A(10)= 0.
      A(11)= 0.
      A(12) = 1.
      A(13) = 1.
      A(14) = 0.
      A(15) = 0.
      A(16) = 200.
      A(17) = 0.
      A(18) = 0.
      A(19) = 16383.
      A(20) = 16383.
      A(21) = 16383.
      A(22) = 16383.
      A(23) = 0.
      A(24) = 0.
      A(25) = 0.
      A(26) = 0.
      A(27) = 0.
      A(28) = 0.
      A(29) = 0.
      A(30) = 1.
      A(31) = 0.0
      A(32) = 0.0
      A(33) = 0.0
      A(34) = 0.0
      A(35) = 0.0
      A(36) = 0.0
      A(37) = 0.0077
      A(38) = 0.0077
      A(40) = 126.
      A(41) = 126.
      A(42) = 0.
      A(43) = 1.
      A(44) = 0.
      A(45) = 1.
      A(46) = 0.
      A(47) = -1.
      A(48) = 0.
      A(50) = 0.
      A(51) = 0.
      A(52) = 1.
      A(53) = 0.
      A(54) = 2.
      A(55) = 0.
      A(56) = 0.
      A(57) = 0.
      A(58) = 0.
      A(59) = 0.
      A(60) = 16383.
      A(61) = 0.
      A(62) = 16383.
      A(63) = 132.
      A(64) = 60.
      A(65) = 0.
      A(66) = 0.
      A(67) = 0.
      A(68) = 0.
      A(69) = 0.
      A(70) = 0.
      A(71) = 0.
      A(72) = 0.
      A(73) = 0.
      A(74) = 0.
      A(75) = 0.0
      A(76) = 0.0
      A(77) = 0.0
      A(78) = 0.0
      A(79) = 0.0
      A(80) = 1.
      A(81) = 0.
      A(82) = 5.
      A(83) = 1H2
      A(84) = 0.0
      A(85) = 0.0
      A(86) = 1
      A(87) = 0.
      A(88) = 0.
      A(89) =10.0
      A(90) =  -1.
      A(91) =  6.
      A(92) = 0.
      A(93) = 0.
      A(94) = 0.
      A(95) = 0.
      A(96) = 0.
      A(97) = 0.
      A(98) = 0.
      A(99) = 2.
      A(100) = 0.
      A(101) = 0.
      A(102) = 0.
      A(103) = 0.
      A(104) = -1.5
      A(105) = -1.5
      A(106) = .15
      A(107) = .15
      A(108) = .15
      A(109) = .15
      A(110) = 0.
      A(111) = .0077
      A(112) = .0077
      A(113) =  9999999999.
      A(114) = 9999999999.
      A(115) = 0.
      A(116) = 0.
      A(117) = 0.
      A(118) = 0.
      A(119) = 0.
      A(120) = 0.
      A(121) = 0.
      A(122) = 0.
      A(123) = 0.
      A(124) = 0.
      A(125) = 0.
      A(126) = 0.
      A(127) = 0.
      A(128) = 0.
      A(129) = 0.
      A(130) = 0.
      A(131) = 0.
      A(132) = 1.
      A(133) = 1.
      A(134) = 0.
      A(135) = 0.
      A(136) = 0.
      A(137) = 0.
      A(138) = 0.
      A(139) = 0.
      A(140) = 0.
      A(141) = 0.
      A(142) = 0.
      A(143) = 0.
      A(144) = 0.
      A(145) = 0.
      A(146) = 0.
      A(147) = 0.
      A(148) = 0.
      A(149) = 0.
      A(150) = 0.
      A(151) = 0.
      A(152) = 0.
      A(153) = 0.
      A(154) = 0.
      A(155) = 0.
      A(156) = 0.
      A(157) = 0.
      A(158) = 0.
      A(159) = 0.
      A(160) = 0.
      A(161) = 1.
      A(162) = 0.
      A(163) = 0.
      A(164) = 23.
      A(165) = 0.
      A(166) = 3.
      A(167) = 63.
      A(168) = 23.
      A(169) = 0.
      A(170) = 1.0
      A(171) = 1.0
      A(172) = 0.
      A(173) = 63.
      A(174) = 0.
      A(175) = -1.
      A(176) = 1.0
      A(177) = 1.0
      A(178) = 0.0
      A(179) = 0.0
      A(180) = 16383.
      A(181) = 16383.
      A(182) = 5.
      A(183) = 0.0
      A(184) = 0.0
      A(185) = 0.0
C
           a(19)=16383
           a(20)=16383
C                
50    RETURN
      END
C
C
C
C
      SUBROUTINE KW1X (X,Y,XS,YS)
C
      COMMON /KWIGS/ Z(200)
C
      IF (Z(8)-1.) 100, 100, 200
  100 CON = 16384.
      GO TO 300
  200 CON = 1.
  300 XS = CON * Z(6) + ABS(Z(2)-X) * Z(176)
      YS = CON * Z(7) + ABS(Z(3)-Y) * Z(177)
      RETURN
      END
C
C
C
      SUBROUTINE KWPARM (N,VALUE)
C
      COMMON /KWIGCN/ ZCON(55)
      COMMON /KWIGS/    Z(200)
      EQUIVALENCE (IV,V)
ccccccc      DATA MF4 /ZFFFF0000/, IB2 /Z4040/
C
          mf4=0
          ib2=0
c
      ZCON(55) = 0.
      IF (N) 100,100,40
   40 IF (N-54) 50,50,100
C
   50 GO TO (100,140,150,200,200,200,200,200,200,200,200,300,300,300,
     1       300,210,210,210,210,400,200,300,300,210,500,600,200,1200,
     2       210,210,210,210,210,220,210,900,210,210,200,200,1200,300,
     3       210,210,210,210,300,210,210,210,1000,1100,1000,1100), N
C
  100 IF (ZCON(49).NE.0.) THEN
CCC        PRINT 110, N,VALUE
      ENDIF
CCCKW  110 FORMAT (/ ' ILLEGAL MODE SET CALL TO KWPARM.    N = ',I10,
CCCKW     1          ' VALUE = ',F15.5 /)
      RETURN
C
  140 IF (VALUE) 100, 100, 145
  145 ZCON(7) = VALUE
      GO TO 210
  150 IF (VALUE) 100, 100, 155
  155 ZCON(9) = VALUE
      GO TO 210
  200 IF (VALUE) 100,100,210
  210 ZCON(N) = VALUE
      RETURN
C
  220 V = VALUE
c      IV = IAND(IV,MF4)
c      IV = IOR( IV,IB2)
      ZCON(N) = V
      RETURN
C
  300 IF (VALUE) 100,210,210
C
  400 IF(VALUE) 210,100,210
C
  500 IF (VALUE) 210,210,510
  510 SAVE = Z(164)
      CALL KW1U  ('0',DUM,DUM,0,'0',VALUE)
      ZCON(26) = Z(164)
      Z(164) = SAVE
      GO TO 210
C
  600 IF (VALUE) 100,610,610
  610 IF (VALUE-63.) 620,620,100
C
C
  620 ZCON(25) = -1.
      GO TO 210
C
C
  900 IF (VALUE-1.) 100,210,910
  910 IF (VALUE-2.) 100,210,920
  920 IF (VALUE-3.) 100,210,100
C
 1000 IF (VALUE+1.) 100,1010,1010
 1010 IF (VALUE-7.) 210,210,100
C
 1100 IF (VALUE+1.) 100,1110,1110
 1110 IF (VALUE-63.) 210,210,100
C
 1200 IF(VALUE-8.7) 1210,1210,1250
 1210 IF(VALUE+8.2) 1260,210,210
 1250 IVAL = VALUE
      VAL = VALUE - IVAL
      IF(VAL.GT..7) VAL = .7
      VALUE = 8. + VAL
      GO TO 210
 1260 VAL = ABS(VALUE)
      IVAL = VAL
      VAL = VAL - IVAL
      IF(VAL.GT..2) VAL = .2
      VALUE = -8. - VAL
      GO TO 210
C
      END
C
C
C
      SUBROUTINE KW1Z (N,V)
C----------------------------MACHINE DEPENDANCIES
C     NONE
C----------------------------END
C PLTCH CONTAINS THE CHARACTER CODE, LEFT JUSTIFIED, FOR A NORMAL SIZE
C PLOT CHARACTER.
ccc      DIMENSION XL(5),YB(5),XR(5),YT(5)
ccc      INTEGER CAM(2)
ccc      DIMENSION IZ(18)
ccc      DIMENSION CSIZZ(64)
ccc      COMMON/KWIGS/A(200)
C
ccc      COMMON /KWCHEI/ CSIZE(64)
ccc      EQUIVALENCE (VV,IVV)
C
CCCCCCCCCC      DATA MF2 /ZFF000000/
CCCCCCCCCC      DATA IB3 /Z404040/
C
ccc      DATA PLTCH /1H2/
C IZ CONTIANS MODE SETS DEPENDENT UPON NORMALIZED OBJECT SPACE.
ccc      DATA IZ /40,41,102,103,106,108,107,109,111,112,113,
ccc     1   114,115,116,162,163,170,171/
C RADN CONVERTS DEGREES TO RADIANS
ccc      DATA RADN /.01745329/, NEXT /1/
ccc      DATA XL /0.,0.,0.,.111267,0./
ccc      DATA XR /1.,0.,1.,.888733,0./
ccc      DATA YB /0.,0.,.064941,0.,0./
ccc      DATA YT /1.,0.,.935059,1.,0./
ccc      DATA CNORM /23./,CSMALL /17./,CLARGE /29./,CLARGR /34./
C
CCCCCCCCCCC      DATA CAM / Z12200,Z12300/, M210 /Z11000/
C
ccc      DATA CSIZZ / 15.,19.,23.,27.,32.,36.,41.,44.,50.,55.,
ccc     1   59.,63.,68.,73.,77.,82.,89.,92.,98.,103.,107.,113.,117.,126.,
ccc     2   133.,138.,141.,146.,150.,154.,159.,164.,174.,181.,186.,191.,
ccc     3   196.,202.,209.,216.,220.,226.,232.,239.,247.,252.,256.,272.,
ccc     4   276.,281.,290.,298.,305.,309.,316.,322.,330.,340.,347.,351.,
ccc     5   356.,361.,366.,370./
C
C
ccc              A(N)=V
C
C

      RETURN
      END
C
C
C
C
C
      SUBROUTINE KWSUBJ (XL,YL,XR,YU)
C----------------------------MACHINE DEPENDANCIES
C     NONE
C----------------------------END
      COMMON/KWIGS/AMODES(200)
C KW1C TO SEE IF WE HAVE ZERO SUBJECT SPACE.
      IF (XR-XL) 10,190,10
10    IF (YU-YL) 20,190,20
C     COMPUTE RASTERS PER SUBJECT SPACE UNIT
   20 AMODES(176) = AMODES(176)*ABS((AMODES(4)-AMODES(2))/(XR-XL))
      AMODES(177) = AMODES(177)*ABS((AMODES(5)-AMODES(3))/(YU-YL))
C     RESET THE MARGINS
      DS = (XR-XL)/(AMODES(4)-AMODES(2))
      DO 30 I=60,61
30    AMODES(I)=(AMODES(I)-AMODES(2))*DS+XL
      J=AMODES(66)+.4
      IF (J) 60,60,40
40    DO 50 I=1,J
50    AMODES(I+66)=(AMODES(I+66)-AMODES(2))*DS+XL
60    DS=(YU-YL)/(AMODES(5)-AMODES(3))
      DO 70 I=62,63
70    AMODES(I)=(AMODES(I)-AMODES(3))*DS+YL
C STORE NEW VALUES FOR THE SUBJECT SPACE.
      AMODES(2)=XL
      AMODES(3)=YL
      AMODES(4)=XR
      AMODES(5)=YU
      DO 180 I=1,2
C TEST FOR LOG MODE IN X OR Y.
      IF (AMODES(I+22)) 80,80,90
C HERE FOR LINEAR SCALING.
80    E=AMODES(I+1)
      G=AMODES(I+3)
      GO TO 170
C HERE FOR LOG SCALING
90    GO TO (100,130), I
100   IF (XR) 200,200,110
110   IF (XL) 210,210,120
  120 AMODES(25) = ALOG10(AMODES(I+1))
      AMODES(27) = ALOG10(AMODES(I+3))
      GO TO 160
130   IF (YU) 220,220,140
140   IF (YL) 230,230,150
  150 AMODES(26) = ALOG10(AMODES(I+1))
      AMODES(28) = ALOG10(AMODES(I+3))
160   E=AMODES(I+24)
      G=AMODES(I+26)
C RECOMPUTE THE SCALING FACTORS.
170   SCALE=(AMODES(I+7)-AMODES(I+5))*AMODES(I+18)/(G-E)
      AMODES(I+9) = AMODES(I+5)*AMODES(I+18)-E*SCALE
      AMODES(I+11)=SCALE
C FOR LOG GRIDS, CHARACTER SIZE REPRESENTS DIFFERENCE OF LOGS IN
C  SUBJECT SPACE.
      AMODES(I+41)=AMODES(I+39)*AMODES(45)*AMODES(I+18)/SCALE
C RESET FOR VECTOR CHARACTERS.
  180 AMODES(I+131) = ABS(AMODES(I+139)*(AMODES(I+41)*AMODES(I+11)/
     1AMODES(I+18))/AMODES(I+39))
      AMODES(17) = AMODES(2) + SIGN(1.,(AMODES(2)-AMODES(4)))
      CALL KW1X(AMODES(17),0.,XS,DUM)
      IF(XS.LT.0.) AMODES(17) = (AMODES(2) + AMODES(4)) * .5
      RETURN
C ZERO SUBJECT SPACE.
190   IER=16
      VAL=0.
      GO TO 250
200   VAL=XR
      GO TO 240
210   VAL=XL
      GO TO 240
220   VAL=YU
      GO TO 240
230   VAL=YL
240   IER=29
  250 CALL KW1H (IER,VAL)
      RETURN
      END
