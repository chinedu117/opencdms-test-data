$STORAGE:2
      SUBROUTINE DRWTXT(TXTCHR,X,Y,IFLG,ANG)
C
C       ** OBJECTIVE:  DRAW TEXT AT THE SPECIFIED X,Y COORDINATES       
C                      NOTE -- ROUTINE DEFHST MUST BE CALLED PRIOR TO THIS
C                              ROUTINE TO DEFINE CHARACTER ATTRIBUTES 
C
C       ** INPUT:
C             TXTCHR...TEXT STRING
C             X........X-POSITION OF TEXT STRING IN WORLD COORDINATES
C             Y........Y-POSITION OF TEXT STRING IN WORLD COORDINATES
C             IFLG.....ALL OPTIONS ARE ALLOWED FOR ANGLES:  0,90,180,270
C                      ONLY OPTION 0 IS ALLOWED FOR OTHER ANGLES
C                         0=X,Y IS LOWER LEFT CORNER OF STRING; NO EDGE CHECK
C                         1=X,Y IS BOTTOM CENTER OF STRING; NO EDGE CHECK
C                         2=X,Y IS LOWER RIGHT CORNER OF STRING; NO EDGE CHECK
C                         3=X,Y IS BOTTOM CENTER OF STRING; EDGE CHECK -- DO
C                               NOT ALLOW STRING EDGE TO GO BEYOND PLOT AREA
C                               BOUNDARY
C             ANG......ANGLE (DEGREES) AT WHICH TEXT IS DRAWN 
C                        
C
$INCLUDE: 'GRFPARM.INC'
$INCLUDE: 'GRAFVAR.INC'
$INCLUDE:  'PLTSPEC.INC'
C
      CHARACTER *(*) TXTCHR
      REAL*4 X,Y,ANG
      INTEGER*2 IFLG
C      
      CHARACTER *80 OUTTXT
C
C       ** LOCAL COMMON TO SAVE SPACE IN DGROUP
      COMMON /DRTXSV/ OUTTXT      
C
C       ** ADD HALO DELIMITERS TO STRING
C
      CALL DELIMSTR(TXTCHR,OUTTXT)  
C
C       ** GET X,Y COORDINATES OF LOWER LEFT CORNER OF STRING -- WHEN LIMIT
C          CHECK IS ON, IF THE LEFT OR RIGHT EDGE OF THE STRING EXTENDS BEYOND
C          THE PLOT BOUNDARY, THE EDGE IS PLACED AT THE BOUNDARY
C      
      CALL GETWASP(WASP)
      CALL INQSTS(OUTTXT,HEIGHT,WIDTH,OFFSET)
C          
C       .. GET THE LIMITS OF THE PLOT AREA FOR THE EDGE CHECK -- XMIN/MAX AND 
C          YMIN/MAX CANNOT BE USED BECAUSE THE VALUES FOR THE MAP MAY BE LESS
C          THAN THE ACTUAL PLOT AREA DEFINED IN THE GDF FILE
      CALL NW2W(GANWLF,GANWBT,XPLTLF,YPLTBT)
      CALL NW2W(GANWRT,GANWTP,XPLTRT,YPLTTP)
C      
      LIMCHK=0
      IF (IFLG.EQ.0) THEN
C          .. X,Y -- LOWER LEFT CORNER OF STRING;  NO EDGE CHECK      
         FAC=0.
      ELSE IF (IFLG.EQ.1) THEN
C          .. X,Y -- BOTTOM CENTER OF STRING;  NO EDGE CHECK      
         FAC=0.5
      ELSE IF (IFLG.EQ.2) THEN
C          .. X,Y -- LOWER RIGHT CORNER OF STRING;  NO EDGE CHECK      
         FAC=1.
      ELSE 
C          .. X,Y -- BOTTOM CENTER OF STRING; EDGE CHECK PERFORMED     
         FAC=0.5
         LIMCHK=1
      ENDIF         
      NIANG = NINT(ANG)
      IF (NIANG.EQ.0) THEN
C      
C          .. TEXT DRAWN AT ANGLE = 0      
         XL = X-FAC*WIDTH
         YL = Y
         IF (LIMCHK.EQ.1) THEN
            XL = AMAX1(XPLTLF,XL)
            XL = AMIN1(XPLTRT,XL+WIDTH)-WIDTH
         ENDIF
      ELSE IF (NIANG.EQ.90) THEN
C      
C          .. TEXT DRAWN AT ANGLE = 90
         WIDTH = WIDTH*WASP
         XL = X
         YL = Y-FAC*WIDTH
         IF (LIMCHK.EQ.1) THEN
            YL = AMAX1(YPLTBT,YL)
            YL = AMIN1(YPLTTP,YL+WIDTH)-WIDTH
         ENDIF
      ELSE IF (NIANG.EQ.180) THEN
C      
C          .. TEXT DRAWN AT ANGLE = 180
         XL = X+FAC*WIDTH
         YL = Y
         IF (LIMCHK.EQ.1) THEN
            XL = AMIN1(XPLTRT,XL)
            XL = AMAX1(XPLTLF,XL-WIDTH)+WIDTH
         ENDIF
      ELSE IF (NIANG.EQ.270) THEN
C      
C          .. TEXT DRAWN AT ANGLE = 270
         WIDTH = WIDTH*WASP
         XL = X
         YL = Y+FAC*WIDTH
         IF (LIMCHK.EQ.1) THEN
            YL = AMIN1(YPLTTP,YL)
            YL = AMAX1(YPLTBT,YL-WIDTH)+WIDTH
         ENDIF
      ELSE   
C      
C          .. TEXT DRAWN AT ANOTHER SPECIFIED ANGLE.
C             X,Y -- LOWER LEFT CORNER OF STRING;  NO EDGE CHECK      
         XL = X
         YL = Y
      ENDIF
C
C       ** PLOT STRING AT SPECIFIED ANGLE
C
      CALL SETSTA(ANG)
      CALL MOVTCA(XL,YL)
      CALL STEXT(OUTTXT)           
C
C       ** DELETE TEXT CURSOR
C
      CALL DELTCU      
C
      RETURN      
      END      
**************************************************************************
      SUBROUTINE DELIMSTR(INSTR,OUTSTR)
C
C       ** OBJECTIVE:  ADD DELIMITERS TO THE BEGINNING AND END OF A STRING
C
C       ** INPUT:
C             INSTR.....TEXT STRING WITH NO DELIMITERS
C       ** OUTPUT:
C             OUTSTR....TEXT STRING CONTAINING DELIMITERS      
C
      CHARACTER INSTR*(*), OUTSTR*(*)
      CHARACTER DELIM*1
      DATA DELIM /'^'/
C
C       ** FIND LAST NON-BLANK CHARACTER IN STRING
C
      LENMAX = LEN(INSTR)
      DO 20 I=LENMAX,1,-1
         IEND = I
         IF (INSTR(I:I).NE.' ') GO TO 25
   20 CONTINUE
      IEND = 1
C
C       ** DEFINE NEW STRING WITH HALO DELIMITERS      
C
   25 OUTSTR = DELIM//INSTR(1:IEND)//DELIM      
C
      RETURN
      END     
**************************************************************************
      SUBROUTINE DEFHLN(ICLR,ITYP,ITHK)
C
C       ** OBJECTIVE:  DEFINE HALO ATTRIBUTES FOR A LINE
C
C       ** INPUT:
C             ICLR....LINE COLOR NUMBER
C             ITYP....LINE PATTERN NUMBER
C             ITHK....LINE THICKNESS IN PIXELS
C    
      CALL SETCOL(ICLR)
      CALL SETLNS(ITYP)
      CALL SETLNW(ITHK)
C
      RETURN
      END
**************************************************************************
      SUBROUTINE DEFHST(IDFONT,ICLR,ANG,TXTASP,TXTHTNW,TXTHTW)
C
C       ** OBJECTIVE:  DEFINE HALO ATTRIBUTES FOR STROKE TEXT
C
C       **INPUT:            
C            IDFONT.....ID NUMBER OF STROKE TEXT FONT
C            ICLR.......TEXT COLOR NUMBER
C            ANG........ANGLE AT WHICH TEXT WILL BE DRAWN  
C            TXTASP.....TEXT ASPECT RATIO
C            TXTHTNW....HEIGHT OF TEXT IN NORMALIZED WORLD COORDINATE UNITS
C       **OUTPUT:
C            TXTHTW.....HEIGHT OF TEXT IN WORLD COORDINATE UNITS.  HEIGHT IS
C                       IN THE DIRECTION THE TEXT IS WRITTEN
C
      COMMON/DEVHNDL/IHNDLSCR,IHNDLVRI,SCRNASP
      PARAMETER (MXFONT=9)
      CHARACTER*3 STFONT(MXFONT)
      CHARACTER*26 FONTFIL
      DATA FONTFIL /'^P:\HALO\FONTS\AHD000.FNT^'/
      DATA STFONT /'104','102','106','107','201','203','206',
     +             '405','406'/
C
C       ** DEFINE STROKE TEXT ATTRIBUTES
C
      FONTFIL(19:21) = STFONT(IDFONT)
C
C       ** CONVERT CHARACTER HEIGHT FROM NORMALIZED WORLD TO
C          WORLD COORDINATES        
C
      CALL YSZNW2W(TXTHTNW,XHTW,YHTW)
      NIANG = NINT(ANG)
      IF (NIANG.EQ.90 .OR. NIANG.EQ.270) THEN
C          .. HEIGHT IN X-DIRECTION FOR ANGLE = 90 OR 270          
         TXTHTW = XHTW
      ELSE 
C          .. HEIGHT IN Y-DIRECTION FOR ALL OTHER ANGLES
         TXTHTW = YHTW
      ENDIF   
C
C       ** MODIFY TEXT ASPECT RATIO FOR OUTPUT DEVICE
C
      CALL INQVIE(X1,Y1,X2,Y2)
      VASP = (Y2-Y1)/(X2-X1)
C **DEBUG
      CALL INQASP(DASPINQ)
      DASP = SCRNASP
C      ASP= TXTASP*VASP/DASP
      ASP= TXTASP/DASP
C **DEBUG
        WRITE(999,*)'######DRWTXT-- DASP,DASPINQ=',DASP,DASPINQ
        WRITE(999,*)'######DRWTXT-- TXTASP,VASP=',TXTASP,VASP
C      
      IPATH = 0
      CALL SETLNW(1)
      CALL SETLNS(1)
      CALL SETHAT(1)
      CALL SETFON(FONTFIL)
C **DEBUG
      CALL CKHALOER(1,'SETFON-DRWTXT',IER)      
      CALL SETSTC(ICLR,ICLR)
      CALL SETDEG(1)
      CALL SETSTE(YHTW,ASP,IPATH)            
C
      RETURN
      END       
**************************************************************************
      SUBROUTINE SETCFON(IFONT)
C
C   ROUTINE TO SET THE HALO STROKE TEXT FONT TO ONE OF THE FONTS SUPPORTED
C   BY CLICOM.
C
C    IFONT...CLICOM STROKE TEXT FONT NUMBER (1-9)
C
      CHARACTER*3 STFONT(9)
      CHARACTER*26 FILNAME
      DATA FILNAME /'&P:\HALO\FONTS\AHD000.FNT&'/
      DATA STFONT /'104','102','106','107','201','203','206',
     +             '405','406'/
C
      FILNAME(19:21) = STFONT(IFONT)
      CALL SETFON(FILNAME)
      RETURN
      END
**************************************************************************
      SUBROUTINE DEFHS2(IDFONT,ICLR,ANG,TXTASP,TXTHTNW,TXTHTW)
C
C       ** OBJECTIVE:  DEFINE HALO ATTRIBUTES FOR STROKE TEXT
C
C       **INPUT:            
C            IDFONT.....ID NUMBER OF STROKE TEXT FONT
C            ICLR.......TEXT COLOR NUMBER
C            ANG........ANGLE AT WHICH TEXT WILL BE DRAWN  
C            TXTASP.....TEXT ASPECT RATIO
C            TXTHTNW....HEIGHT OF TEXT IN NORMALIZED WORLD COORDINATE UNITS
C       **OUTPUT:
C            TXTHTW.....HEIGHT OF TEXT IN WORLD COORDINATE UNITS.  HEIGHT IS
C                       IN THE DIRECTION THE TEXT IS WRITTEN
C
C       ** CONVERT CHARACTER HEIGHT FROM NORMALIZED WORLD TO
C          WORLD COORDINATES        
C
      CALL YSZNW2W(TXTHTNW,XHTW,YHTW)
      NIANG = NINT(ANG)
      IF (NIANG.EQ.90 .OR. NIANG.EQ.270) THEN
C          .. HEIGHT IN X-DIRECTION FOR ANGLE = 90 OR 270          
         TXTHTW = XHTW
      ELSE 
C          .. HEIGHT IN Y-DIRECTION FOR ALL OTHER ANGLES
         TXTHTW = YHTW
      ENDIF   
C
C       ** MODIFY TEXT ASPECT RATIO FOR OUTPUT DEVICE
C
      CALL INQASP(DASP)
      ASP= TXTASP/DASP
C
      IPATH = 0
      CALL SETLNW(1)
      CALL SETLNS(1)
      CALL SETHAT(1)
      CALL SETCFON(IDFONT)
      CALL SETSTC(ICLR,ICLR)
      CALL SETDEG(1)
      CALL SETSTE(YHTW,ASP,IPATH)            
C
      RETURN
      END       
**************************************************************************
      SUBROUTINE DFHSTWIN(IDFONT,ICLR,CURASP,TXTHTND,TXTHTW)
C
C       ** OBJECTIVE:  DEFINE HALO ATTRIBUTES FOR STROKE TEXT THAT
C                      WILL BE USED IN A WINDOW
C
C       **INPUT:            
C            IDFONT.....ID NUMBER OF STROKE TEXT FONT
C            ICLR.......TEXT COLOR NUMBER
C            CURASP.....TEXT ASPECT RATIO FOR CURRENT COORDINATE SYSTEM
C            TXTHTND....HEIGHT OF TEXT IN NORMALIZED DEVICE COORDINATE UNITS
C       **OUTPUT:
C            TXTHTW.....HEIGHT OF TEXT IN WORLD COORDINATE UNITS.  HEIGHT IS
C                       IN THE DIRECTION THE TEXT IS WRITTEN
C
      PARAMETER (MXFONT=9)
      CHARACTER*3 STFONT(MXFONT)
      CHARACTER*26 FONTFIL
      DATA FONTFIL /'^P:\HALO\FONTS\AHD000.FNT^'/
      DATA STFONT /'104','102','106','107','201','203','206',
     +             '405','406'/
C
C       ** CONVERT CHARACTER HEIGHT FROM NORMALIZED DEVICE TO
C          WORLD COORDINATES        
C
      CALL INQVIE(XND1,YND1,XND2,YND2)
      CALL INQWOR(XW1,YW1,XW2,YW2)
C      CALL MAPNTW(XND1,YND1,XW,YW1)
C      CALL MAPNTW(XND1,YND1+TXTHTND,XW,YW2)
C      YHTW = ABS(YW1-YW2)
      CALL MAPNTW(XND1,YND2-TXTHTND,XW,YW)
      YHTW = YW-YW1
      TXTHTW = YHTW
C      
C       ** DEFINE STROKE TEXT ATTRIBUTES
C
      FONTFIL(19:21) = STFONT(IDFONT)
      IPATH = 0
      CALL SETLNW(1)
      CALL SETLNS(1)
      CALL SETHAT(1)
      CALL SETFON(FONTFIL)
      CALL SETSTC(ICLR,ICLR)
      CALL SETDEG(1)
      CALL SETSTE(YHTW,CURASP,IPATH)            
C
      RETURN
      END       
**************************************************************************
      SUBROUTINE CURASP(STDASP,ACTASP)
C
C       ** OBJECTIVE:  GIVEN AN INPUT ASPECT RATIO WITH RESPECT TO A
C                      VIEWPORT OPENED TO THE ENTIRE SCREEN (0.-.999) AND
C                      A WORLD COORDINATE SYSTEM OF (0.-1.), DETERMINE THE
C                      EQUIVALENT ASPECT RATIO IN THE CURRENT COORDINATE
C                      SYSTEM.
C
C **DEBUG
      INTEGER*2 HORPIX,VERPIX
        LOGICAL FIRSTCALL
        DATA FIRSTCALL/.TRUE./
        IF (FIRSTCALL) THEN
           OPEN(999,FILE='C:\BUGTXT.PRT')
           FIRSTCALL = .FALSE.
        ENDIF   
C **END DEBUG     
C
C       ** MODIFY TEXT ASPECT RATIO FOR OUTPUT DEVICE
C
      CALL INQVIE(XND1,YND1,XND2,YND2)
C **DEBUG
      WRITE(999,*)'*********** CURASP ***********'
      WRITE(999,*)'XND1,YND1=',XND1,YND1
      WRITE(999,*)'XND2,YND2=',XND2,YND2
C **END DEBUG      
      DXND = ABS(XND2-XND1)
      DYND = ABS(YND2-YND1)
      VASPFAC = DYND/DXND
C **DEBUG
        WRITE(999,*) 'DXND,DYND=',DXND,DYND      
C **END DEBUG        
C      VASPFAC = (YND2-YND1)/(XND2-XND1)
C      VASPFAC = 1.0
C      
      CALL INQWOR(XW1,YW1,XW2,YW2)
      WASPFAC = (XW2-XW1)/(YW2-YW1)
C **DEBUG
      WRITE(999,*)'XW1,YW1=',XW1,YW1
      WRITE(999,*)'XW2,YW2=',XW2,YW2
      WRITE(999,*)'VASPFAC,WASPFAC=',VASPFAC,WASPFAC
C **END DEBUG      
C      
      CALL INQDRA(HORPIX,VERPIX)
C      PIXFAC  = FLOAT(HORPIX+1)/FLOAT(VERPIX+1)
      PIXFAC = 1.  
      CALL INQASP(DASPINQ)
      DASP=1.
C **DEBUG
      WRITE(999,*)'HORPIX,VERPIX=',HORPIX,VERPIX
      WRITE(999,*)'PIXFAC,DASP,DASPINQ=',PIXFAC,DASP,DASPINQ
C **END DEBUG      
C      
C      ACTASP= STDASP*VASPFAC*WASPFAC/(DASP*PIXFAC)
C      ACTASP= STDASP*VASPFAC*WASPFAC
      ACTASP= STDASP*VASPFAC
C **DEBUG
C      WRITE(999,*)'EQN:  ACTASP= STDASP*VASPFAC*WASPFAC'
      WRITE(999,*)'EQN:  ACTASP= STDASP*VASPFAC'
      WRITE(999,*)'      VASPFAC = DYND/DXND'
      WRITE(999,*)'STDASP,ACTASP',STDASP,ACTASP
C **END DEBUG      
C      ACTASP = STDASP      
C     
      RETURN
      END
**************************************************************************
      SUBROUTINE DEFHDT(IDFONT,ICLRF,ICLRB,IPATH,ITXTHT,ITXTWID,IMODE)
C
C       ** OBJECTIVE:  DEFINE DOT TEXT ATTRIBUTES      
C
C       ** INPUT:
C              IDFONT.....ID NUMBER OF DOT TEXT FONT
C              ICLRF......ID NUMBER OF FOREGROUND COLOR
C              ICLRB......ID NUMBER OF BACKGROUND COLOR
C              IPATH......TEXT ORIENTATION   0=0 DEGREES    1=90 DEGREES
C                                            2=180 DEGREES  3=270 DEGREES
C              ITXTHT.....TEXT HEIGHT IN UNITS OF 8 PIXELS
C              ITXTWID....TEXT HEIGHT IN UNITS OF 8 PIXELS
C              IMODE......0=DO NOT DRAW BORDER AROUND TEXT.  OVERLAY TEXT
C                           ONTO CURRENT BACKGROUND.
C                         1=DRAW A BORDER AROUND TEXT.  THE BACKGROUND
C                           BEHIND THE TEXT IS DESTROYED.
C
      INTEGER *2 IDFONT,ICLRF,ICLRB,IPATH,ITXTHT,ITXTWID,IMODE
C
      PARAMETER (MXFONT=6)
      CHARACTER*3 DTFONT(MXFONT)
      CHARACTER*26 FONTFIL
      DATA FONTFIL /'^P:\HALO\FONTS\AHD000.FNT^'/
      DATA DTFONT /'001','002','010','012','330','331'/
C
C       ** DEFINE DOT TEXT ATTRIBUTES
C
      FONTFIL(19:21) = DTFONT(IDFONT)
      CALL SETFON(FONTFIL)
      CALL SETTEX(ITXTHT,ITXTWID,IPATH,IMODE)
      CALL SETTCL(ICLRF,ICLRB)
C
      RETURN
      END      