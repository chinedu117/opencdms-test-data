$STORAGE:2
      SUBROUTINE BGNHALO(IDEF,PALETTE,PALDEF)
C
C       **INPUT:
C            IDEF......FLAG TO INDICATE MODE AND PALETTE SETTINGS
C                       0=DEVMODE, DEFAULT PALETTE
C                       1=DEVMODE, USER DEFINED PALETTES
C                      10=AQCMODE, DEFAULT PALETTE
C                      11=AQCMODE, USER DEFINED PALETTES
C            PALETTE...
C            PALDEF....      
C
      INTEGER*2 IDEF,PALETTE,PALDEF(16,*)      
$INCLUDE:'HALOENV.INC'
      COMMON/DEVHNDL/IHNDLSCR,IHNDLVRI,SCRNASP
      CHARACTER*1  RTNCODE
      CHARACTER*30 KRNLPATH
      LOGICAL FIRSTCALL
C      
      DATA FIRSTCALL/.TRUE./
C **DEBUG      
C     DATA KRNLPATH/'&P:\HALO\KERNELS&'/
C      DATA KRNLPATH/'&C:\CLICOM\HALO\KERNELS&'/
C      
C       ** INITIALIZE THE GRAPHICS DEVICE
C
      IF (FIRSTCALL) THEN
         FIRSTCALL = .FALSE.
         IHNDLSCR=0
         IHNDLVRI=0
         RTNCODE = '0'
C         CALL SETKER(KRNLPATH)
         CALL HALOINIT(RTNCODE)
         IF (RTNCODE.NE.'0') GO TO 900
         CALL SETDEV(DEVICE)
         CALL CKHALOER(1,'SETDEV-SCR',IER)
         IF (IER.NE.0) GO TO 990
      ELSE   
         CALL SETADE(IHNDLSCR)
         CALL CKHALOER(1,'SETADE-SCR',IER)
         IF (IER.NE.0) GO TO 990
      ENDIF
C **DEBUG
        WRITE(999,*)'BGNHALO AQC,DEV MODE=',AQCMODE,DEVMODE      
      IF (IDEF.GE.10) THEN
         CALL INITGR(AQCMODE)
      ELSE
         CALL INITGR(DEVMODE)
      ENDIF
      CALL CKHALOER(1,'INITGR-SCR',IER)
      IF (IER.NE.0) GO TO 990
      CALL INQADE(IHNDLSCR)
      CALL CKHALOER(1,'INQADE-SCR',IER)
      IF (IER.NE.0) GO TO 990
      CALL SETIEE(1)
C
C       ** INITIAL PALETTE DEFINITIONS AND CURRENT PALETTE
C
      IF (IDEF.EQ.1 .OR. IDEF.EQ.11) THEN
         CALL SETGPAL(PALETTE,PALDEF)
      ENDIF         
C      
c       ** If you are not using a IBM EGA card the mode number may have
C          to be MODIFIED.  For example: CGA 320x200 4 colors mode would
C          equal 0 
C
      CALL SETCOL(0)
      CALL CLR
C      
C       .. IN ORDER TO OPEN THE VIEWPORT TO THE ENTIRE SCREEN, A MAX VALUE
C          EQUAL TO .999 MUST BE USED.  A VALUE OF 1.0 IS A SPECIAL SIGNAL FOR
C          HALO TO 'TURN OFF' THE VIEWPORT WHICH DOES NOT RESET ASPECT RATIOS
      CALL SETVIE(0.,0.,0.999,0.999,-1,-1)
      CALL SETWOR(0.,0.,1.,1.)
      CALL INQASP(SCRNASP)
C **DEBUG      
      WRITE(999,*)'#########BGNAHLO SCRNASP=',SCRNASP
      RETURN
C
C       ** ERROR PROCESSING
C
  900 CONTINUE
C       .. ERROR:  UNABLE TO FIND HALO ENVIRONMENT FILE -- HALOGRF?.ENV --
      CALL WRTMSG(3,601,12,1,1,' ',0)
  990 CONTINUE      
      STOP 1       
      END
      
      SUBROUTINE FINHALO
      COMMON/DEVHNDL/IHNDLSCR,IHNDLVRI,SCRNASP
      INTEGER*2 NPORT
      CHARACTER*1 NULL
      DATA NPORT/0/      
      NULL = CHAR(0)
      CALL SETLOC(NULL,NPORT)
      CALL SETADE(IHNDLSCR)
      CALL CLOSEG
      IF (IHNDLVRI.GT.0) THEN
         CALL SETADE(IHNDLVRI)
         CALL CLOSEG
      ENDIF
      RETURN
      END
*************************************************************************
      SUBROUTINE CKHALOER(ITXT,ERRTXT,IER)
C
C        **INPUT:
C            ITXT......FLAG TO INDICATE THE METHOD TO OUTPUT ERROR MESSAGE
C                         0=RETURN ERROR NUMBER; DO NOT PRINT MESSAGE
C                         1=PRINT MESSAGE IN TEXT MODE
C                         2=PRINT MESSAGE IN GRAPHICS MODE
C            ERRTXT....TEXT TO BE ADDED TO ERROR MESSAGE
C       **OUTPUT:
C            IER.......HALO ERROR; O INDICATES NO ERROR
C
      INTEGER*2 ITXT,IER
      CHARACTER*(*) ERRTXT
C
      PARAMETER     (NCHALO=40)
      CHARACTER*(NCHALO)  MSGTXT
      CHARACTER*2   INCHAR
      INTEGER*1     IDX1ER(61)
      DATA IDX1ER/195,195,195,195,195,195,634,634,195,639,
     +            196,195,191,195,198,197,195,195,195,522, 
     +            519,523,524,194,194,194,194,194,194,638, 
     +            638,628,637,635,635,194,194,634,194,195, 
     +            195,195,195,195,195,195,195,195,195,195, 
     +            195,195,195,195,195,195,195,195,195,635,636/
      DATA XLL/0.5/,YLL/0.2/
C
      IER = 0
      CALL INQERR(IFCN,IER)
      IF (IER.NE.0) THEN
         MSGTXT = ' '
         NCH = LNG(ERRTXT)
         WRITE(MSGTXT,500) ERRTXT(1:NCH),IER,IFCN
  500    FORMAT(A,' [HALO',I3,I4,']')       
         NCH = LNG(MSGTXT)
         NMSG = IDX1ER(IER)
         IF (ITXT.EQ.1) THEN
            CALL WRTMSG(4,NMSG,4,1,1,MSGTXT,NCH)
         ELSE   
            CALL GRAFNOTE(XLL,YLL,NMSG,202,MSGTXT,NCH,INCHAR)
         ENDIF   
      ENDIF   
      RETURN
      END           
*************************************************************************
      SUBROUTINE SETACTPR(PRDRVR,PRATRB,PRASP,IER)
C
      CHARACTER*(*) PRDRVR
      INTEGER*2     PRATRB(0:*)      
C
$INCLUDE:'GRFPARM.INC'
$INCLUDE:'GRAFVAR.INC'
      INTEGER*2    PATTR(0:63)
      COMMON/DEVHNDL/IHNDLSCR,IHNDLVRI,SCRNASP
C      
      LOGICAL      BWREV
      CHARACTER*1 NULL
      NULL = CHAR(0)
C   
C **DEBUG
        WRITE(999,*)'###############SETACTPR--PRDRVR=',PRDRVR,'-'
      CALL SETPRN(NULL)
      CALL CKHALOER(1,'SETPRN-NULL',IER)
      CALL SETPRN(PRDRVR)
      CALL CKHALOER(1,PRDRVR,IER)
      IF (IER.NE.0) GO TO 200
C      
C       .. CALCULATE THE HEIGHT OF THE OUTPUT IN DOTS
      CALL INQDRA(MX,MY)
      CALL INQASP(DEVASP)
      XD=MX+1
      YD=MY+1
C **DEBUG
C      PRATRB(1) = (FLOAT(PRATRB(0))*PRASP*YD)/(XD*DEVASP)
      PRATRB(1) = (FLOAT(PRATRB(0))*PRASP*YD)/(XD*SCRNASP)
C **DEBUG
      WRITE(999,*)'XD,YD,DEV/SCRNASP=',XD,YD,DEVASP,SCRNASP
      WRITE(999,*)'PRASP,PRATRB 0,1=',PRASP,PRATRB(0),PRATRB(1)
      WRITE(999,*)'###################END SETACTPR'
C      
      DO 20 I=0,26
         PATTR(I) = PRATRB(I)
   20 CONTINUE   
C   
      BWREV = PATTR(3).LE.0
      IF (BWREV) PATTR(3)=1
C      
      DO 25 I=27,63
         PATTR(I)=-1
   25 CONTINUE      
      CALL SETPAT(PATTR)
      CALL CKHALOER(1,'SETPAT',IER)
      IF (IER.NE.0) GO TO 200
      CALL DEFPPAL(PALDEF(1,PALETTE),BWREV,IER)
C
  200 CONTINUE      
      RETURN
      END
