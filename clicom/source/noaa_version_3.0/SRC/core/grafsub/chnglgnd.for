$STORAGE:2
      SUBROUTINE CHNGLGND(MENUNBR,ORIENT,LEGCLR,LEGFONT,LEGSIZE,ASP,
     +                    LEGLOC,PALETTE,PALDEF)
C------------------------------------------------------------------------------
C     MANAGE THE ROUTINES THAT CHANGE THE ATTRIBUTES (COLOR, FONT AND SIZE)
C     OF THE TEXT WITHIN THE LEGEND.  ALSO MANAGE THE ROUTINE THAT CHANGES THE
C     LOCATION OF THE LEGEND DRAWN ON A GRAPH.
C     
C     INPUT ARGUMENTS:
C
C     MENUNBR     INT2       NUMBER OF MENU TO DISPLAY FROM GRAPHICS MENU FILE
C     ORIENT      INT2       ORIENTATION OF LEGEND:
C                            0 = NO LEGEND
C                            1 = HORIZONTAL
C                            2 = VERTICAL
C     LEGCLR      INT2       CURRENT COLOR OF TEXT IN LEGEND
C     LEGFONT     INT2       CURRENT FONT OF TEXT IN LEGEND
C     LEGSIZE     REAL       CURRENT SIZE OF TEXT IN LEGEND (NWC)
C     ASP         REAL       CURRENT ASPECT RATIO OF TEXT IN LEGEND
C     LEGLOC      REAL ARRAY CURRENT POSITION OF LEGEND--CENTER POINT OF BOX  
C                            (NORMALIZED WORLD COORDINATES)
C     PALETTE     INT2       CURRENT PALETTE NUMBER
C     PALDEF      INT2 ARRAY CURRENT DEFINITION OF ALL 12 POSSIBLE PALETTES
C
C     OUTPUT ARGUMENTS:
C
C     LEGCLR      INT2       REVISED COLOR OF TEXT IN LEGEND
C     LEGFONT     INT2       REVISED FONT OF TEXT IN LEGEND
C     LEGSIZE     REAL       REVISED SIZE OF TEXT IN LEGEND (NWC)
C     ASP         REAL       REVISED ASPECT RATIO OF TEXT IN LEGEND
C     LEGLOC      REAL ARRAY REVISED POSITION OF LEGEND 
C------------------------------------------------------------------------------
$INCLUDE: 'SAVBUF.INC'
$INCLUDE: 'CURRPLT.INC'
C
C       ** LOCAL COMMON TO SAVE SPACE IN D-GROUP
C
      INTEGER      MENUNBR, ORIENT, LEGCLR, LEGFONT, PALETTE, HELPLVL,
     +             PALDEF(16,12), BGCOLR, ITEMLN, MAXLIN
      INTEGER*4    MBYTS
      REAL         LEGSIZE, ASP, LEGLOC(2), HGBOX, HGLINE(24), HGTXT,
     +             THGT, WDTXT, WIDITM, XND, YND, XWR1, YWR1, XWR2,
     +             YWR2, XLF, XRG, YBO, YTP, XLBX, XRBX, YBBX, YTBX,
     +             XWINSIZE, CHGT, CWID, COFF, SAVLGLOC(2)
      CHARACTER*1  RTNCODE, LGNCODE, NEWLGNSZ
      CHARACTER*2  INCHAR
      CHARACTER*78 MSG
      CHARACTER*20 TXT
      COMMON /CHLGSV/ BGCOLR, ITEMLN, MAXLIN, MBYTS, HGBOX, HGLINE, 
     +                HGTXT, THGT, WDTXT, WIDITM, XND, YND, XWR1, YWR1,
     +                XWR2, YWR2, XLF, XRG, YBO, YTP, XLBX, XRBX, YBBX,
     +                YTBX, XWINSIZE, CHGT, CWID, COFF,
     +                INCHAR, RTNCODE, LGNCODE, NEWLGNSZ, MSG, TXT
C
      CALL GETMSG(541,MSG)
      CALL GETMSG(999,MSG)
      CALL DELIMSTR(MSG,TXT)
      XND = 0.2
      YND = 0.7
      HELPLVL = 20
C
C---  DETERMINE CURRENT LEGEND BOX SIZE, LOCATION, & WHETHER THE LEGEND WAS
C---  ACTUALLY DRAWN ON THE PLOT (LGNCODE='0') 
C
  100 CALL DEFHST(LEGFONT,LEGCLR,0.0,ASP,LEGSIZE,THGT)
      CALL LGNDSIZE(ORIENT,LGNTRY,LGLINBAR,LGITMWID,LGTEXT,LEGLOC,
     +     LGALIGN,MAXBYT,ITEMLN,MAXLIN,HGLINE,HGTXT,WIDITM,WDTXT,XLBX,
     +     YBBX,XRBX,YTBX,LGNCODE)
      IF (LGNCODE .EQ. '1') THEN
         CALL GRAFNOTE(.1,.95,447,448,' ',0,INCHAR)
      ENDIF      
C
      RTNCODE = '0'
      CALL GRAFMNU(1,MENUNBR,XND,YND,HELPLVL,INCHAR)
      IF     (INCHAR .EQ. '1 ') THEN
C---  CHANGE THE COLOR OF THE TEXT WITHIN THE LEGEND  -------
             IF (LGNCODE .EQ. '1') THEN
                GO TO 100
             ENDIF
             ISAV = LEGCLR
             CALL TXTCOLR(TXT,1.0,1.0,LEGSIZE,ASP,LEGFONT,0,LEGCLR,
     +                    PALETTE,PALDEF,0)
             IF (ISAV .EQ. LEGCLR) THEN
                RTNCODE = '1'
             ENDIF
      ELSEIF (INCHAR .EQ. '2 ') THEN
C---  CHANGE THE FONT OF THE TEXT WITHIN THE LEGEND  -------
             ISAV = LEGFONT
             CALL TXTFONT(TXT,1.0,1.0,LEGSIZE,ASP,LEGFONT,0,LEGCLR,0)
             IF (ISAV .EQ. LEGFONT) THEN
                RTNCODE = '1'
             ELSE
C
C--- DOES THE NEW FONT MAKE THE LEGEND TOO BIG TO SAVE IN BUFFER?
C--- IF SO, ASK THE USER IF HE REALLY WANTS TO DO THAT.
C
                SAVLGLOC(1) =LEGLOC(1)
                SAVLGLOC(2) =LEGLOC(2)
                CALL DEFHST(LEGFONT,LEGCLR,0.0,ASP,LEGSIZE,THGT)
                CALL LGNDSIZE(ORIENT,LGNTRY,LGLINBAR,LGITMWID,LGTEXT,
     +          LEGLOC,LGALIGN,MAXBYT,ITEMLN,MAXLIN,HGLINE,HGTXT,WIDITM,
     +          WDTXT,XLF,YBO,XRG,YTP,NEWLGNSZ)
                IF (NEWLGNSZ .EQ. '1') THEN
                   CALL GRAFNOTE(.1,.95,449,448,' ',0,INCHAR)
                   LEGFONT = ISAV
                   RTNCODE = '1'
                ELSE
C---  CHECK THE FONT & SIZE COMBINATION SO THAT IT STAYS IN BOX FOR TXTSIZ
                   CALL INQWOR(XWR1,YWR1,XWR2,YWR2)
                   XWINSIZE = 0.4 * (XWR2 - XWR1)
                   CALL INQSTS(TXT,CHGT,CWID,COFF)
                   IF (CWID .GT. XWINSIZE) THEN
                       CALL GRAFNOTE(.1,.95,445,446,' ',0,INCHAR)
                       LEGLOC(1)=SAVLGLOC(1)
                       LEGLOC(2)=SAVLGLOC(2)
                       LEGFONT = ISAV               
                       RTNCODE = '1'
                   ENDIF
                ENDIF
             ENDIF
      ELSEIF (INCHAR .EQ. '3 ') THEN
C----- CHANGE THE SIZE OF THE TEXT WITHIN THE LEGEND  -------
             CALL BUFSIZ(XND,YND-0.4,XND+0.4,YND,MBYTS)
             IF (MBYTS .GT. MAXBYT) THEN
                CALL GRAFNOTE(.1,.95,554,202,' ',0,INCHAR)
                CALL FINHALO
                STOP 2
             ENDIF
             CALL MAPNTW(XND,YND-0.4,XWR1,YWR1)
             CALL MAPNTW(XND+0.4,YND,XWR2,YWR2)
             CALL DELHCU( )
             CALL MOVEFR(XWR1,YWR1,XWR2,YWR2,BUFFER)
             BGCOLR = 0
             CALL SETCOL(BGCOLR)
             CALL BAR(XWR1,YWR1,XWR2,YWR2)
             CALL SETCOL(BGCOLR+1)
             CALL BOX(XWR1,YWR1,XWR2,YWR2)
             CALL SETCOL(BGCOLR)
             RSAV = LEGSIZE
             RASP = ASP
             CALL TXTSIZ(TXT,XND+0.2,YND-0.38,LEGSIZE,ASP,LEGFONT,0,
     +                   LEGCLR,0,BGCOLR)
             CALL MOVETO(XWR1,YWR1,BUFFER,1)
             IF (RSAV .EQ. LEGSIZE .AND. RASP .EQ. ASP) THEN
                RTNCODE = '1'
             ELSE
C
C--- DOES THE NEW TEXT SIZE MAKE THE LEGEND TOO BIG TO SAVE IN BUFFER?
C--- IF SO, ASK THE USER IF HE REALLY WANTS TO DO THAT.
C
                CALL DEFHST(LEGFONT,LEGCLR,0.0,ASP,LEGSIZE,THGT)
                CALL LGNDSIZE(ORIENT,LGNTRY,LGLINBAR,LGITMWID,LGTEXT,
     +          LEGLOC,LGALIGN,MAXBYT,ITEMLN,MAXLIN,HGLINE,HGTXT,WIDITM,
     +          WDTXT,XLF,YBO,XRG,YTP,NEWLGNSZ)
                IF (NEWLGNSZ .EQ. '1') THEN
                   CALL GRAFNOTE(.1,.95,449,448,' ',0,INCHAR)
                   LEGSIZE = RSAV
                   ASP     = RASP
                   RTNCODE = '1'
                ENDIF
             ENDIF
      ELSEIF (INCHAR .EQ. '4 ') THEN
C----- CHANGE THE POSITION OF THE LEGEND ON THE PLOT -----
             IF (LGNCODE .EQ. '1') THEN
                GO TO 100
             ENDIF
             XWR1 = XLBX
             YWR1 = YBBX
             XWR2 = XRBX
             YWR2 = YTBX
             CALL LGNLOC(XWR1,YWR1,XWR2,YWR2,RTNCODE)
             IF (RTNCODE .EQ. '0') THEN
                XWR1 = XWR1 + ((XWR2 - XWR1) / 2.0)
                YWR1 = YWR1 + ((YWR2 - YWR1) / 2.0)
                CALL W2NW(XWR1,YWR1,LEGLOC(1),LEGLOC(2))
             ENDIF
      ELSEIF (INCHAR .EQ. '4F' .OR. INCHAR .EQ. 'ES') THEN
             RETURN
      ENDIF
C
C---  REPLACE THE PORTION OF THE PLOT THAT THE LEGEND OBSCURED ONLY WHEN THE
C---  THE LEGEND WOULD FIT IN THE TEMPORARY HOLD FILE.  LASTLY, DRAW THE
C---  LEGEND WITH THE REVISED ATTRIBUTE
C
      IF (RTNCODE .EQ. '0') THEN
         IF (LGNCODE .EQ. '0') THEN
            OPEN (UNIT=62,ACCESS='DIRECT',FORM='BINARY',RECL=512,
     +            FILE='O:\DATA\SQUX')
            READ(62) BUFFER
            CALL MOVETO(XLBX,YTBX,BUFFER,1)
            CLOSE(62)
         ENDIF
         CALL DRWLGND(ORIENT,LGBRDR,LGNTRY,LGLINBAR,LGSTYL,LGITMWID,
     +        LGCOLR,LGTEXT,LEGCLR,LEGFONT,LEGSIZE,LEGLOC,ASP,LGALIGN)
      ENDIF
      GO TO 100
      END
*************************************************************
      SUBROUTINE LGNLOC (XL,YB,XR,YT,RTNCODE)
C------------------------------------------------------------------------------
C     THIS ROUTINE ALLOWS THE USER TO MOVE THE LOCATION OF THE LEGEND
C
C     INPUT & OUTPUT ARGUMENTS:
C
C     XL      REAL LOWER LEFT  X-COORDINATE OF THE LEGEND BOX-WORLD COORDINATES
C     YB      REAL LOWER LEFT  Y-COORDINATE OF THE LEGEND BOX
C     XR      REAL UPPER RIGHT X-COORDINATE OF THE LEGEND BOX
C     YT      REAL UPPER RIGHT Y-COORDINATE OF THE LEGEND BOX
C     RTNCODE CHAR 0 = NEW LOCATION
C                  1 = NO CHANGE IN LOCATION
C
C     NOTE:    XL,YB,XR,YT SHOULD BE VARIABLES IN THE CALLING PROGRAM SINCE
C              THIS ROUTINE MAY CHANGE ITS VALUES
C------------------------------------------------------------------------------
      CHARACTER*1  RTNCODE
      CHARACTER*2  INCHAR
      INTEGER*2    IXN,IYN,IXX,IYX
C
C     FIND THE ACTUAL WORLD COORDS FOR THE CURRENT VIEWPORT AS SET BY HALO
C     MAPPING ROUTINES. THE MAX VALUE RETURNED BY AN INQWOR IS THE VALUE USED
C     IN THE SETWORLD CALL. ROUND-OFF CAN LEAD TO A DIFFERENT VALUE  9-AP-91
C
      CALL INQVIE(XDL,YDU,XDR,YDB)
      CALL MAPNTD(XDR,YDU,IXX,IYX)
      CALL MAPDTW(IXX,IYX,XX,YX)
      CALL MAPNTD(XDL,YDB,IXN,IYN)
      CALL MAPDTW(IXN,IYN,XN,YN)
      CALL DELHCU( )
      CALL SETCOL(1)
      CALL RBOX(XL,YB,XR,YT)
C
C     WHEN ESTABLISHING THE COORDINATES OF THE BEGINING POINT FOR USE WITH
C     THE MOUSE, SET THE MOUSE TO THAT VALUE AND READ IT BACK (HALO ROUND-OFF).
C     THIS BECOMES THE VALUES FOR XPREV, YPREV. X-Y PREV ARE NOT AFFECTED 
C     IF THERE IS NO MOUSE.
C     
      XPREV = (XL + XR) /2.0
      YPREV = (YB + YT) /2.0
      CALL ORGLOC(XPREV,YPREV)
      CALL RDLOC(XPOS,YPOS,INCHAR,RTNCODE)
      IF (RTNCODE .EQ. '1') THEN
         XPREV = XPOS
         YPREV = YPOS
      ELSE
         XPOS = XPREV
         YPOS = YPREV
      ENDIF
C
C   READ LOCATOR POSITION AND EVALUATE CHARACTERS RETURNED.
C   MOVE BOX AS REQUESTED. 
C
   20 CONTINUE
         CALL RDLOC(XPOS,YPOS,INCHAR,RTNCODE)
C
C     IF ENTER(RETURN) HAS BEEN PRESSED, CLEAR BOX AND RETURN WITH NEW
C     VALUES FOR THE CORNERS OF THE BOX
C
         IF (INCHAR.EQ.'RE') THEN
            CALL DELBOX
            CALL DELTCU( )
            RTNCODE = '0'
            CALL ORGLOC(XPOS,YPOS)
            RETURN
C
C     IF F4 HAS BEEN PRESSED IGNORE THE MOVE 
C
         ELSE IF (INCHAR .EQ. '4F' .OR. INCHAR .EQ. 'ES') THEN
            CALL DELBOX
            CALL DELTCU( )
            RTNCODE = '1'
            CALL ORGLOC(XPOS,YPOS)
            RETURN
         ENDIF
C
C     POSITION HAS CHANGED - REDRAW BOX IN NEW LOCATION.
C
         IF (XPOS.NE.XPREV .OR. YPOS.NE.YPREV) THEN   
             XR = XR + (XPOS-XPREV)
             YT = YT + (YPOS-YPREV)
             XL = XL + (XPOS-XPREV)
             YB = YB + (YPOS-YPREV)
             IF (XL.LT.XN.OR.YB.LT.YN .OR. XR.GT.XX.OR.YT.GT.YX) THEN
                XR = XR - (XPOS-XPREV)
                YT = YT - (YPOS-YPREV)
                XL = XL - (XPOS-XPREV)
                YB = YB - (YPOS-YPREV)
                IF (RTNCODE .EQ. '1') THEN
                   CALL ORGLOC(XPREV,YPREV)
                ELSE
                   XPOS=XPREV
                   YPOS=YPREV
                ENDIF
                CALL BEEP
             ELSE
                CALL RBOX(XL,YB,XR,YT)
                XPREV = XPOS
                YPREV = YPOS
             ENDIF
         ENDIF
      GO TO 20
      END
