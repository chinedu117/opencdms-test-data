$STORAGE:2
      SUBROUTINE GRAFWIN(ICNTRL,XMIN,YMIN,XMAX,YMAX)
C
C       ** OBJECTIVE:  OPEN OR CLOSE A WINDOW ON A HALO GRAPHICS SCREEN
C                      THE VALUE OF INPUT VARIABLE ICNTRL DETERMINES WHETHER
C                      THE SCREEN BEHIND THE WINDOW WILL BE SAVED
C       ** INPUT
C            ICNTRL...... 1=OPEN A WINDOW, SAVE TEXT BEHIND WINDOW
C                         2=OPEN A WINDOW, DO NOT SAVE TEXT
C                         0=CLOSE WINDOW, RESTORE TEXT IF SAVED
C            XMIN,YMIN...UPPER LEFT WINDOW CORNER IN NORMALIZED DEVICE 
C                        COORDINATES (0.0 - 1.0) 
C            XMAX,YMAX...LOWER RIGHT WINDOW CORNER IN NORMALIZED DEVICE COORD
C
C       ** NOTE:  XMIN,YMIN,XMAX,YMAX CAN BE MODIFIED BY THIS ROUTINE
C                 AND THUS SHOULD BE VARIABLES IN THE CALLING ROUTINE.
C                 IF THEY ARE EXPRESSIONS YOU CAN GET UNPREDICTABLE 
C                 RESULTS.
C
      PARAMETER (MAXWIN=5)
      CHARACTER*2 INCHAR
      CHARACTER*1 BUFF1(10)
      CHARACTER*78 MSG,ZOOMSG
      INTEGER*4 STRTBUF(MAXWIN),ENDBUF(MAXWIN),NBYTES,MAXBUF
      INTEGER*2 IWINDOW,IBGCOLOR,SAVBKG(MAXWIN)
      REAL X1(MAXWIN),Y1(MAXWIN),X2(MAXWIN),Y2(MAXWIN), XLOW(MAXWIN)
     +    ,YLOW(MAXWIN),XHIGH(MAXWIN),YHIGH(MAXWIN)
C     
$INCLUDE: 'SAVBUF.INC'     
      EQUIVALENCE(BUFF1(1),BUFFER(1))
C       ** SAVBUF.INC REQUIRED FOR MAXBYT      
      DATA IWINDOW /0/, MAXBUF /MAXBYT/
C
C       .. IN ORDER TO OPEN THE VIEWPORT TO THE ENTIRE SCREEN, A MAX VALUE
C          EQUAL TO .999 MUST BE USED.  A VALUE OF 1.0 IS A SPECIAL SIGNAL FOR
C          HALO TO 'TURN OFF' THE VIEWPORT WHICH DOES NOT RESET ASPECT RATIOS
      DATA XMNVP,YMNVP/0.,.0/, XMXVP,YMXVP/.999,.999/
C
C       ** OPEN A NEW WINDOW 
C
      IF (ICNTRL.GT.0) THEN
C
C          ** SAVE THE CURRENT VIEWPORT, WORLD COORDINATES, AND BACKGROUND 
C             COLOR SO THEY CAN BE RESTORED LATER.
C        
         IWINDOW = IWINDOW + 1
         IF (ICNTRL.EQ.1) THEN
            SAVBKG(IWINDOW) = 1
         ELSE 
            SAVBKG(IWINDOW) = 0   
         ENDIF   
         IF (IWINDOW.EQ.1) THEN
            CALL INQBKN(IBGCOLOR)
         ENDIF   
         CALL INQVIE(X1(IWINDOW),Y1(IWINDOW),X2(IWINDOW),Y2(IWINDOW))
         CALL INQWOR(XLOW(IWINDOW),YLOW(IWINDOW),XHIGH(IWINDOW)
     +              ,YHIGH(IWINDOW))
         IF (YMAX.LT.YMIN) THEN
            YTEMP = YMIN
            YMIN = YMAX
            YMAX = YTEMP
         END IF
C
C      MAKE SURE THE WINDOW DOESN'T EXTEND OUTSIDE OF THE DEVICE.
C      ADJUST LOCATION IF IT DOES.
C
         XWIDTH = ABS(XMAX-XMIN)
         XHEIGHT = ABS(YMAX-YMIN)
         IF (XMIN.GT.XMAX) THEN
            TEMP = XMIN
            XMIN = XMAX
            XMAX = TEMP
         END IF
         IF (YMIN.GT.YMAX) THEN
            TEMP = YMIN
            YMIN = YMAX
            YMAX = TEMP
         END IF
         IF (XMIN.LT.0.01) THEN
            XMIN = 0.01
            XMAX = XMIN + XWIDTH
         ELSE IF (XMAX.GT.0.99) THEN
            XMAX = .99
            XMIN = XMAX - XWIDTH
         END IF
         IF (YMIN.LT.0.01) THEN
            YMIN = 0.01
            YMAX = YMIN + XHEIGHT
         ELSE IF (YMAX.GT.0.99) THEN
            YMAX = 0.99
            YMIN = YMAX - XHEIGHT
         END IF
C
C      SET THE VIEWPORT TO THE WHOLE SCREEN AND SET THE WORLD COORDS
C      TO 0,0 - 100,100.   DETERMINE THE WORLD COORDS FOR THE 
C      NORMALIZED DEVICE COORDINATE WINDOW BOUNDARIES THAT WERE PASSED.
C      REMEMBER TO SWAP UP AND DOWN DIRECTIONS.
C
         CALL SETVIE(XMNVP,YMNVP,XMXVP,YMXVP,-1,-1)
         CALL SETWOR(0.0,0.0,100.,100.)
         XMINW = XMIN*100.
         XMAXW = XMAX*100.
         YMINW = (YMXVP-YMAX) * 100.
         YMAXW = (YMXVP-YMIN) * 100.
C
C   MAKE SURE THERE IS SUFFICIENT BUFFER SPACE TO SAVE BEHIND THE WINDOW
C
         IF (ICNTRL.EQ.1) THEN
            CALL BUFSIZ(XMIN,YMIN,XMAX,YMAX,NBYTES)
            DO 20 I=IWINDOW-1,1,-1
               IF (SAVBKG(I).EQ.1) GO TO 25
   20       CONTINUE   
            I=0
   25       CONTINUE   
            IPRVSAV = I
            IF (IPRVSAV.EQ.0) THEN
               STRTBUF(IWINDOW) = 1
            ELSE
               STRTBUF(IWINDOW) = ENDBUF(IPRVSAV) + 1
            END IF
            ENDBUF(IWINDOW) = STRTBUF(IWINDOW) + NBYTES
            IF (ENDBUF(IWINDOW).GT.MAXBUF) THEN
               CALL SETCOL(3)
               CALL BAR(0.,5.,75.,20.)
               CALL SETTEX(2,1,0,1)
               CALL SETTCL(1,3)
               CALL GETMSG(554,MSG)
               CALL DELIMSTR(MSG,ZOOMSG)
               CALL MOVTCA(0.,15.)
               CALL TEXT(ZOOMSG)
               CALL GETMSG(202,MSG)
               CALL GETMSG(999,MSG)
               CALL DELIMSTR(MSG,ZOOMSG)
               CALL MOVTCA(0.,10.)
               CALL TEXT(ZOOMSG)
               CALL GETCHAR(0,INCHAR)
               CALL FINHALO
C                .. THIS STOP SENDS YOU BACK TO THE START OF GRAFINIT -- IT
C                   SHOULD BE IMPROVED, BUT THIS REQUIRES CHANGES TO THE
C                   CALLING ROUTINES 
               STOP 2
            END IF
C
C     SAVE THE SCREEN BEHIND THE NEW WINDOW INTO BUFFER
C
            IBUF = STRTBUF(IWINDOW)
            CALL DELHCU( )
            CALL MOVEFR(XMINW,YMAXW,XMAXW,YMINW,BUFF1(IBUF))
         ENDIF   
C
C     DRAW THE WINDOW SHADOW AND OPEN THE NEW VIEWPORT JUST TO
C     THE UPPER RIGHT. (MAKE IT SMALLER TO AVOID ROUND OFF ERRORS)
C       
         CALL SETLNW(1)
         CALL SETLNS(1)
         CALL SETHAT(1)
         CALL SETCOL(0)
         CALL BAR(XMINW,YMINW,XMINW+1.5,YMAXW-1.5)
         CALL BAR(XMINW,YMINW,XMAXW-1.5,YMINW+1.5)
         CALL SETVIE(XMIN+.012,YMIN+.005,XMAX-.005,YMAX-.015,2,3)
C
C  SET THE BACKGROUND COLOR BACK TO WHAT IT WAS, CLOSE THE WINDOW AND
C  RESTORE THE SCREEN, VIEWPORT, AND COORDINATES ----
C
      ELSE
         IF (SAVBKG(IWINDOW).EQ.1) THEN
C             .. THE FOLLOWING SETVIEWPORT CALL IS REQUIRED TO SET THE
C                BACKGROUND COLOR BACK TO THE ORIGINAL VALUE 
            CALL SETVIE(XMIN+.012,YMIN+.005,XMAX-.005,YMAX-.015,IBGCOLOR
     +                 ,IBGCOLOR)
C             .. RESTORE THE SAVED PORTION OF THE SCREEN     
            CALL SETVIE(XMNVP,YMNVP,XMXVP,YMXVP,-1,-1)
            CALL SETWOR(0.0,0.0,100.,100.)
            XMINW = XMIN*100.
            XMAXW = XMAX*100.
            YMINW = (YMXVP-YMAX) * 100.
            YMAXW = (YMXVP-YMIN) * 100.
            IBUF = STRTBUF(IWINDOW)
            CALL MOVETO(XMINW,YMAXW,BUFF1(IBUF),1)
         ELSE
C             .. CLEAR THE WINDOW AND SET THE BACKGROUND COLOR BACK TO THE
C                ORIGINAL VALUE
            CALL SETVIE(XMIN,YMIN,XMAX,YMAX,IBGCOLOR,IBGCOLOR)
         ENDIF   
C          .. RESTORE THE SAVED VIEWPORT AND WORLD COORDINATES
         IF (X2(IWINDOW).NE.0) THEN
            CALL SETVIE(X1(IWINDOW),Y1(IWINDOW),X2(IWINDOW),Y2(IWINDOW)
     +              ,-1,-1)
         END IF
         CALL SETWOR(XLOW(IWINDOW),YLOW(IWINDOW),XHIGH(IWINDOW)
     +              ,YHIGH(IWINDOW))
         IWINDOW = IWINDOW - 1
      END IF      
      RETURN
      END
